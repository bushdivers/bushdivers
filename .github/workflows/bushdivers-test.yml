name: Bushdivers Pre-Deploy

on:
  push:
    branches:
      - main
env:
  LARAVEL_BYPASS_ENV_CHECK: 1

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-20.04
    env:
      DB_DATABASE: bushdivers_ci
      DB_USERNAME: root
      DB_PASSWORD: password
      DB_HOST: 127.0.0.1
      DB_PORT: 3257
      MARIADB_ALLOW_EMPTY_PASSWORD: false
      MARIADB_ROOT_PASSWORD: password
      MARIADB_DATABASE: bushdivers_ci
    services:
      mariadb:
        image: mariadb:10.6
        ports:
          - 3257:3306
        env:
          MARIADB_ALLOW_EMPTY_PASSWORD: false
          MARIADB_ROOT_PASSWORD: password
          MARIADB_DATABASE: bushdivers_ci
        options: --health-cmd="healthcheck.sh --connect --innodb_initialized" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      - uses: actions/checkout@v2
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Install Dependencies
        run: composer install --ignore-platform-reqs
      - name: Generate key
        run: php artisan key:generate
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Clear Config
        run: php artisan config:clear
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        run: vendor/bin/phpunit

  front-end-checks:
    name: Frontend Checks
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: '20.11'
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: npm i
      - name: Eslint
        run: npm run lint
      - name: Check it builds
        run: npm run build

  deploy:
    name: Deploy App
    runs-on: ubuntu-20.04
    needs: [ backend-tests, front-end-checks ]
    steps:
      - name: Post Webhook
        shell: bash
        env:
          CLONE_URL: ${{ secrets.CLONE_URL }}
          DEPLOY_EMAIL: ${{ secrets.DEPLOY_EMAIL }}
          DEPLOY_URL: ${{ secrets.DEPLOY_URL }}
        run: |
          curl -d '{"payload": {"clone_url": $CLONE_URL, "branch": "main", "new_ref": "latest", "email": $DEPLOY_EMAIL}}' -H "Content-Type: application/json" -X POST $DEPLOY_URL



