<?php

namespace Tests\Feature\MarketPlace;

use App\Models\Enums\TransactionTypes;
use App\Models\Fleet;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class PurchaseTest extends TestCase
{
    use RefreshDatabase;

    protected Model $user;
    protected Model $fleet;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
        $this->fleet = Fleet::factory()->create();
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_purchase_success()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 10000000
        ]);
        $data = [
            'purchaseType' => 'new',
            'hub' => 'AYMR',
            'deliveryIcao' => 'AYMR',
            'reg' => 'N1234',
            'total' => 10000,
            'id' => $this->fleet->id
        ];
        $response = $this->actingAs($this->user)->post('/marketplace/purchase', $data);

        $response->assertStatus(302);
        // assert user transaction exists
        $this->assertDatabaseHas('user_accounts', [
            'user_id' => $this->user->id,
            'type' => TransactionTypes::AircraftPurchase,
            'total' => -10000
        ]);
        $this->assertDatabaseHas('aircraft', [
            'owner_id' => $this->user->id,
            'registration' => 'N1234',
            'fleet_id' => $this->fleet->id
        ]);
        // assert aircraft is created
    }

    public function test_purchase_not_processed_with_insufficient_funds()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 500
        ]);
        $data = [
            'purchaseType' => 'new',
            'hub' => 'AYMR',
            'deliveryIcao' => 'AYMR',
            'reg' => 'N1234',
            'total' => 10000,
            'id' => $this->fleet->id
        ];
        $response = $this->actingAs($this->user)->post('/marketplace/purchase', $data);

        $response->assertStatus(302);
        $this->followRedirects($response)->assertSee('Insufficient funds');
        // assert user transaction does not exist
        $this->assertDatabaseMissing('user_accounts', [
            'user_id' => $this->user->id,
            'type' => TransactionTypes::AircraftPurchase
        ]);

    }
}
