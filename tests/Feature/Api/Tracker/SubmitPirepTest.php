<?php

namespace Tests\Feature\Api\Tracker;

use App\Events\PirepFiled;
use App\Models\Aircraft;
use App\Models\Airport;
use App\Models\Booking;
use App\Models\Contract;
use App\Models\ContractCargo;
use App\Models\Enums\AircraftState;
use App\Models\Fleet;
use App\Models\Flight;
use App\Models\FlightLog;
use App\Models\Pirep;
use App\Models\PirepCargo;
use App\Models\User;
use App\Services\ContractService;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Event;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class SubmitPirepTest extends TestCase
{
    use RefreshDatabase;

    protected Model $user;
    protected Model $pirep;
    protected Model $pirepCargo;
    protected Model $contract;
    protected Model $contractCargo;
    protected Model $fleet;
    protected Model $aircraft;
    protected Model $booking;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create([
            'rank_id' => 1,
            'flights_time' => 299,
            'points' => 49,
            'created_at' => Carbon::now()->addYears(-2)
        ]);
        $this->fleet = Fleet::factory()->create();
        $this->aircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id,
            'fuel_onboard' => 50,
            'current_airport_id' => 'AYMR',
            'user_id' => $this->user->id
        ]);
        DB::table('cargo_types')->insert([
            ['type' => 1, 'text' => 'Solar Panels'],
            ['type' => 1, 'text' => 'Building materials'],
            ['type' => 2, 'text' => 'Medics'],
            ['type' => 2, 'text' => 'Locals'],
        ]);

        $this->contract = Contract::factory()->create([
            'contract_value' => 250.00,
            'dep_airport_id' => 'AYMR',
            'arr_airport_id' => 'AYMN'
        ]);
        $this->contractCargo = ContractCargo::factory()->create([
            'contract_id' => $this->contract->id,
            'current_airport_id' => $this->contract->dep_airport_id
        ]);
        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'destination_airport_id' => $this->contract->arr_airport_id,
            'departure_airport_id' => $this->contract->dep_airport_id,
            'aircraft_id' => $this->aircraft
        ]);

        $this->pirepCargo = PirepCargo::factory()->create([
            'pirep_id' => $this->pirep->id,
            'contract_cargo_id' => $this->contractCargo->id
        ]);

        Airport::factory()->create([
            'identifier' => 'AYMR'
        ]);
        Airport::factory()->create([
            'identifier' => 'AYMN'
        ]);

        FlightLog::factory()->create([
            'pirep_id' => $this->pirep->id,
            'lat' => -6.36263,
            'lon' => 143.23056
        ]);

        FlightLog::factory()->create([
            'pirep_id' => $this->pirep->id,
            'lat' => -6.14477,
            'lon' => 143.65752
        ]);

    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_pirep_submitted_successfully()
    {
        Artisan::call('db:seed --class=RankSeeder');
        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id' => $this->pirep->id,
            'fuel_used' => 25,
            'distance' => 76,
            'flight_time' => 45,
            'landing_rate' => -149.12,
            'block_off_time'=> Carbon::now()->addHours(-1),
            'block_on_time' => Carbon::now()->addMinutes(-5)
        ];

        $response = $this->postJson('/api/pirep/submit', $data);

        $response->assertStatus(200);
    }

    public function test_pilot_calcs_peformed_when_pirep_submitted()
    {
        Event::fake();

        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id' => $this->pirep->id,
            'fuel_used' => 25,
            'distance' => 76,
            'flight_time' => 45,
            'landing_rate' => -149.12,
            'block_off_time'=> Carbon::now()->addHours(-1),
            'block_on_time' => Carbon::now()->addMinutes(-5)
        ];

        $response = $this->postJson('/api/pirep/submit', $data);

        Event::assertDispatched(PirepFiled::class);
    }

    public function test_pilot_pay_calc_when_pirep_submitted()
    {
        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id' => $this->pirep->id,
            'fuel_used' => 25,
            'flight_time' => 45,
            'landing_rate' => -149.12,
            'block_off_time'=> Carbon::now()->addHours(-1),
            'block_on_time' => Carbon::now()->addMinutes(-5)
        ];

        $this->postJson('/api/pirep/submit', $data);

        $this->assertDatabaseHas('user_accounts', [
            'flight_id' => $this->pirep->id,
            'total' => $this->contract->contract_value
        ]);
        $this->assertDatabaseHas('users', [
            'id' => $this->user->id,
            'account_balance' => $this->contract->contract_value
        ]);
    }

    public function test_pilot_location_and_flights_updated()
    {
        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id' => $this->pirep->id,
            'fuel_used' => 25,
            'distance' => 50,
            'flight_time' => 60,
            'landing_rate' => 150,
            'block_off_time'=> Carbon::now()->addHours(-1),
            'block_on_time' => Carbon::now()->addMinutes(-5)
        ];

        $this->postJson('/api/pirep/submit', $data);

        $this->assertDatabaseHas('users', [
            'id' => $this->user->id,
            'current_airport_id' => $this->contract->arr_airport_id,
            'flights_time' => $this->user->flights_time + 60,
            'flights' => $this->user->flights + 1,
        ]);
    }

    public function test_aircraft_location_and_state_updated()
    {
        Artisan::call('db:seed --class=RankSeeder');
        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id' => $this->pirep->id,
            'fuel_used' => 25,
            'distance' => 76,
            'flight_time' => 45,
            'landing_rate' => -149.12,
            'block_off_time'=> Carbon::now()->addHours(-1),
            'block_on_time' => Carbon::now()->addMinutes(-5),
            'submitted_at' => Carbon::now()
        ];

        $location = $this->contract->arr_airport_id;
        $hours = $this->aircraft->flight_time_mins += 45;
        $fuel = $this->aircraft->fuel_onboard -= 25;

        $this->postJson('/api/pirep/submit', $data);

        $pirep = Pirep::where('aircraft_id', $this->aircraft->id)->first();

        $this->assertDatabaseHas('aircraft', [
            'id' => $this->aircraft->id,
            'flight_time_mins' => $hours,
            'fuel_onboard' => $fuel,
            'state' => AircraftState::AVAILABLE,
            'current_airport_id' => $location,
            'last_flight' => $pirep->submitted_at
        ]);
    }

    public function test_pilot_gets_rank_upgraded()
    {
        Artisan::call('db:seed --class=RankSeeder');
        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id' => $this->pirep->id,
            'fuel_used' => 25,
            'distance' => 76,
            'flight_time' => 45,
            'landing_rate' => -149.12,
            'block_off_time'=> Carbon::now()->addHours(-1),
            'block_on_time' => Carbon::now()->addMinutes(-5),
            'submitted_at' => Carbon::now()
        ];

        $this->postJson('/api/pirep/submit', $data);

        $this->assertDatabaseHas('users', [
            'id' => $this->user->id,
            'rank_id' => 2
        ]);
    }

    public function test_pilot_gets_award_added()
    {
        Artisan::call('db:seed --class=RankSeeder');
        Artisan::call('db:seed --class=AwardSeeder');
        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id' => $this->pirep->id,
            'fuel_used' => 25,
            'distance' => 76,
            'flight_time' => 45,
            'landing_rate' => -149.12,
            'block_off_time'=> Carbon::now()->addHours(-1),
            'block_on_time' => Carbon::now()->addMinutes(-5),
            'submitted_at' => Carbon::now()
        ];

        $this->postJson('/api/pirep/submit', $data);

        $this->assertDatabaseHas('award_user', [
            'user_id' => $this->user->id,
            'award_id' => 1
        ]);
    }
}
