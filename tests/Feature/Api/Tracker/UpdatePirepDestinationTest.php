<?php

namespace Tests\Feature\Api\Tracker;

use App\Models\Aircraft;
use App\Models\Airport;
use App\Models\Fleet;
use App\Models\Pirep;
use App\Models\User;
use Carbon\Carbon;
use Database\Factories\FleetFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class UpdatePirepDestinationTest extends TestCase
{
    use RefreshDatabase;

    protected Model $user;
    protected Model $pirep;
    protected Model $airport1;
    protected Model $airport2;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create([
            'rank_id' => 1,
            'flights_time' => 299,
            'points' => 49,
            'created_at' => Carbon::now()->addYears(-2)
        ]);
        $this->airport1 = Airport::factory()->create([
            'identifier' => 'AYMR',
            'name' => 'Moro',
            'country' => 'PG',
            'is_hub' => true,
            'lat' => -6.36188,
            'lon' => 143.23070,
            'altitude' => 100
        ]);
        $this->airport2 = Airport::factory()->create([
            'identifier' => 'AYMH',
            'name' => 'Mount Hagen',
            'country' => 'PG',
            'is_hub' => true,
            'lat' => -5.82781,
            'lon' => 144.29953,
            'altitude' => 100
        ]);
        $aircraft = Aircraft::factory()->create([
            'owner_id' => 0,
            'current_airport_id' => $this->airport1,
            'hub_id' => $this->airport1,
        ]);

        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'destination_airport_id' => $this->airport2->identifier,
            'departure_airport_id' => 'AYMN',
            'aircraft_id' => $aircraft->id,
        ]);
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_response_is_successful()
    {
        $lat = -6.36323;
        $lon = 143.24665;

        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id' => $this->pirep->id,
            'lat' => $lat,
            'lon' => $lon
        ];

        $response = $this->postJson('/api/pirep/destination', $data);

        $response->assertStatus(200);
    }

    public function test_response_icao_is_moro()
    {
        $lat = -6.36323;
        $lon = 143.24665;

        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id' => $this->pirep->id,
            'lat' => $lat,
            'lon' => $lon
        ];

        $response = $this->postJson('/api/pirep/destination', $data);

        $response->assertJsonFragment(['icao' => 'AYMR']);
    }

    public function test_pirep_destination_updated_to_moro()
    {
        $lat = -6.36323;
        $lon = 143.24665;

        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id' => $this->pirep->id,
            'lat' => $lat,
            'lon' => $lon
        ];

        $response = $this->postJson('/api/pirep/destination', $data);

        $this->assertDatabaseHas('pireps', [
            'id' => $this->pirep->id,
            'destination_airport_id' => 'AYMR'
        ]);
    }

    public function test_airport_not_found_fails_gracefully()
    {
        $lat = -14.264383;
        $lon = -7.145881;

        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id' => $this->pirep->id,
            'lat' => $lat,
            'lon' => $lon
        ];

        $response = $this->postJson('/api/pirep/destination', $data);
        $response->assertStatus(404);
    }

    public function test_fleet_only_at_base_airport()
    {
        $this->airport1->is_thirdparty = true;
        $this->airport1->save();

        $this->user->allow_thirdparty_airport = true;
        $this->user->save();

        Sanctum::actingAs(
            $this->user,
            ['*']
        );

        $data = [
            'pirep_id' => $this->pirep->id,
            'lat' => $this->airport1->lat,
            'lon' => $this->airport1->lon
        ];

        $response = $this->postJson('/api/pirep/destination', $data);
        $response->assertStatus(404);
    }

    public function test_thirdparty_cannot_be_used()
    {
        $lat = -6.36323;
        $lon = 143.24665;

        // Slot inbetween AYRM and landing point
        $thirdpartyAirport = Airport::factory()->create([
            'identifier' => 'TP01',
            'name' => 'Third Party Airport',
            'is_thirdparty' => true,
            'lat' => -6.36288,
            'lon' => 143.24070,
            'altitude' => 100
        ]);

        $aircraft = \App\Models\Aircraft::factory()->create([
            'owner_id' => $this->user->id,
            'registration' => 'N123TP',
            'fleet_id' => $this->pirep->aircraft->fleet_id
        ]);
        $this->pirep->aircraft_id = $aircraft->id;
        $this->pirep->save();

        Sanctum::actingAs(
            $this->user,
            ['*']
        );

        $data = [
            'pirep_id' => $this->pirep->id,
            'lat' => $lat,
            'lon' => $lon
        ];

        $response = $this->postJson('/api/pirep/destination', $data);

        $response->assertStatus(200);
        $this->assertDatabaseHas('pireps', [
            'id' => $this->pirep->id,
            'destination_airport_id' => 'AYMR'
        ]);

        $this->user->allow_thirdparty_airport = true;
        $this->user->save();

        $response = $this->postJson('/api/pirep/destination', $data);
        $this->assertDatabaseHas('pireps', [
            'id' => $this->pirep->id,
            'destination_airport_id' => 'TP01'
        ]);
    }
}
