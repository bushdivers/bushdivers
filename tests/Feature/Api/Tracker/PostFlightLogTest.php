<?php

namespace Tests\Feature\Api\Tracker;

use App\Models\Aircraft;
use App\Models\Airport;
use App\Models\Booking;
use App\Models\Contract;
use App\Models\ContractCargo;
use App\Models\Fleet;
use App\Models\Flight;
use App\Models\FlightLog;
use App\Models\Pirep;
use App\Models\PirepCargo;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class PostFlightLogTest extends TestCase
{
    use RefreshDatabase;

    protected Model $user;
    protected Model $pirep;
    protected Model $pirepCargo;
    protected Model $contract;
    protected Model $contractCargo;
    protected Model $fleet;
    protected Model $aircraft;
    protected Model $booking;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create([
            'rank_id' => 1,
            'flights_time' => 299,
            'points' => 49,
            'created_at' => Carbon::now()->addYears(-2)
        ]);
        $this->fleet = Fleet::factory()->create();
        $this->aircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id,
            'fuel_onboard' => 50,
            'current_airport_id' => 'AYMR',
            'user_id' => $this->user->id
        ]);
        DB::table('cargo_types')->insert([
            ['type' => 1, 'text' => 'Solar Panels'],
            ['type' => 1, 'text' => 'Building materials'],
            ['type' => 2, 'text' => 'Medics'],
            ['type' => 2, 'text' => 'Locals'],
        ]);

        $this->contract = Contract::factory()->create([
            'contract_value' => 250.00,
            'dep_airport_id' => 'AYMR',
            'arr_airport_id' => 'AYMN'
        ]);

        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'destination_airport_id' => $this->contract->arr_airport_id,
            'departure_airport_id' => $this->contract->dep_airport_id,
            'aircraft_id' => $this->aircraft
        ]);

        $this->pirepCargo = PirepCargo::factory()->create([
            'pirep_id' => $this->pirep->id,
            'contract_cargo_id' => $this->contract->id
        ]);

        Airport::factory()->create([
            'identifier' => 'AYMR'
        ]);
        Airport::factory()->create([
            'identifier' => 'AYMN'
        ]);

    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_add_new_log_success()
    {
        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id'=> $this->pirep->id,
            'lat' => -5.82781,
            'lon' => 144.29953,
            'distance' => 3,
            'heading' => 257,
            'altitude' => 2342,
            'indicated_speed' => 165,
            'ground_speed' => 171,
            'fuel_flow' => 12.1,
            'vs' => 345.02,
            'sim_time' => Carbon::now(),
            'zulu_time' => Carbon::createFromTimestampUTC(Carbon::now()),
        ];

        $response = $this->postJson('/api/log', $data);
        $response->assertStatus(201);
    }

    public function test_add_new_log_stores_data()
    {
        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id'=> $this->pirep->id,
            'lat' => -5.82781,
            'lon' => 144.29953,
            'distance' => 3,
            'heading' => 257,
            'altitude' => 2342,
            'indicated_speed' => 165,
            'ground_speed' => 171,
            'fuel_flow' => 12.1,
            'vs' => 345.02,
            'sim_time' => Carbon::now(),
            'zulu_time' => Carbon::createFromTimestampUTC(Carbon::now()),
        ];

        $response = $this->postJson('/api/log', $data);
        $this->assertDatabaseHas('flight_logs', [
            'distance' => 3,
            'heading' => 257,
            'altitude' => 2342
        ]);
    }

    public function test_add_new_log_missing_data_fails_gracefully()
    {
        Sanctum::actingAs(
            $this->user,
            ['*']
        );
        $data = [
            'pirep_id'=> $this->pirep->id,
            'lat' => -5.82781,
            'lon' => 144.29953,
            'heading' => 257,
            'distance' => 3,
            'altitude' => 2342,
            'ground_speed' => 171,
            'fuel_flow' => 12.1,
            'vs' => 345.02,
            'sim_time' => Carbon::now(),
            'zulu_time' => Carbon::createFromTimestampUTC(Carbon::now()),
        ];

        $response = $this->postJson('/api/log', $data);
        $response->assertStatus(422);
    }
}
