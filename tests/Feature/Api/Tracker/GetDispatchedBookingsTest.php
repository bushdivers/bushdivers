<?php

namespace Tests\Feature\Api\Tracker;

use App\Models\Aircraft;
use App\Models\Airport;
use App\Models\Booking;
use App\Models\Contract;
use App\Models\ContractCargo;
use App\Models\Fleet;
use App\Models\Flight;
use App\Models\FlightLog;
use App\Models\Pirep;
use App\Models\PirepCargo;
use App\Models\Rental;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Laravel\Sanctum\Sanctum;
use PhpParser\Node\Expr\AssignOp\Mod;
use Tests\TestCase;

class GetDispatchedBookingsTest extends TestCase
{
    use RefreshDatabase;

    protected Model $user;
    protected Model $aircraft;
    protected Model $contract;
    protected Model $contractCargo;
    protected Model $booking;
    protected Model $pirep;
    protected Model $pirepCargo;
    protected Model $fleet;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create([
            'current_airport_id' => 'AYMR'
        ]);
        $this->fleet = Fleet::factory()->create();
        $this->aircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id,
            'fuel_onboard' => 50,
            'current_airport_id' => 'AYMR',
            'user_id' => $this->user->id
        ]);
        DB::table('cargo_types')->insert([
            ['type' => 1, 'text' => 'Solar Panels'],
            ['type' => 1, 'text' => 'Building materials'],
            ['type' => 2, 'text' => 'Medics'],
            ['type' => 2, 'text' => 'Locals'],
        ]);

        $this->contract = Contract::factory()->create([
            'contract_value' => 250.00,
            'dep_airport_id' => 'AYMR',
            'arr_airport_id' => 'AYMN'
        ]);
        $this->contractCargo = ContractCargo::factory()->create([
            'contract_id' => $this->contract->id,
            'current_airport_id' => $this->contract->dep_airport_id
        ]);


        Airport::factory()->create([
            'identifier' => 'AYMR'
        ]);
        Airport::factory()->create([
            'identifier' => 'AYMN'
        ]);


    }

    /**
     * A basic feature test example.
     *
     * @return void
     */

    public function test_returns_bookings_only_from_current_location()
    {
        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'destination_airport_id' => $this->contract->arr_airport_id,
            'departure_airport_id' => $this->contract->dep_airport_id,
            'aircraft_id' => $this->aircraft
        ]);

        $this->pirepCargo = PirepCargo::factory()->create([
            'pirep_id' => $this->pirep->id,
            'contract_cargo_id' => $this->contractCargo->id
        ]);

        Sanctum::actingAs(
            $this->user,
            ['*']
        );

        $response = $this->getJson('/api/dispatch');
        $response->assertStatus(200);
        $response->assertJsonFragment(['departure_airport_id' => $this->pirep->departure_airport_id]);
    }

    public function test_returns_bookings_when_dead_heading()
    {
        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'destination_airport_id' => $this->contract->arr_airport_id,
            'departure_airport_id' => $this->contract->dep_airport_id,
            'aircraft_id' => $this->aircraft,
            'is_empty' => 1
        ]);

        Sanctum::actingAs(
            $this->user,
            ['*']
        );

        $response = $this->getJson('/api/dispatch');
        $response->assertStatus(200);
        $response->assertJson(['is_empty' => '1']);
    }

    public function test_returns_cargo_for_booking()
    {
        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'destination_airport_id' => $this->contract->arr_airport_id,
            'departure_airport_id' => $this->contract->dep_airport_id,
            'aircraft_id' => $this->aircraft
        ]);

        $this->pirepCargo = PirepCargo::factory()->create([
            'pirep_id' => $this->pirep->id,
            'contract_cargo_id' => $this->contractCargo->id
        ]);

        Sanctum::actingAs(
            $this->user,
            ['*']
        );

        $response = $this->getJson('/api/dispatch/cargo');
        $response->assertStatus(200);
        $response->assertJsonCount(1);
    }

    public function test_returns_cargo_type_for_booking()
    {
        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'destination_airport_id' => $this->contract->arr_airport_id,
            'departure_airport_id' => $this->contract->dep_airport_id,
            'aircraft_id' => $this->aircraft
        ]);

        $this->pirepCargo = PirepCargo::factory()->create([
            'pirep_id' => $this->pirep->id,
            'contract_cargo_id' => $this->contractCargo->id
        ]);

        Sanctum::actingAs(
            $this->user,
            ['*']
        );

        $response = $this->getJson('/api/dispatch/cargo');
        $response->assertStatus(200);
        $response->assertJsonFragment(['contract_type' => 'Cargo']);
    }

    public function test_returns_multiple_bookings()
    {
        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'destination_airport_id' => $this->contract->arr_airport_id,
            'departure_airport_id' => $this->contract->dep_airport_id,
            'aircraft_id' => $this->aircraft
        ]);

        $this->pirepCargo = PirepCargo::factory()->create([
            'pirep_id' => $this->pirep->id,
            'contract_cargo_id' => $this->contractCargo->id
        ]);

        $contractCargo = ContractCargo::factory()->create([
            'contract_id' => $this->contract->id,
            'current_airport_id' => $this->contract->dep_airport_id
        ]);

        $this->pirepCargo = PirepCargo::factory()->create([
            'pirep_id' => $this->pirep->id,
            'contract_cargo_id' => $contractCargo->id
        ]);

        Sanctum::actingAs(
            $this->user,
            ['*']
        );

        $response = $this->getJson('/api/dispatch/cargo');
        $response->assertStatus(200);
        $response->assertJsonCount(2);
    }

    public function test_returns_zero_bookings()
    {
        Sanctum::actingAs(
            User::factory()->create(),
            ['*']
        );

        $response = $this->getJson('/api/dispatch');
        $response->assertStatus(204);
    }

    public function test_returns_bookings_for_rental_aircraft()
    {
        $rental = Rental::factory()->create([
            'current_airport_id' => $this->contract->dep_airport_id,
            'user_id' => $this->user->id,
            'fleet_id' => $this->fleet->id
        ]);
        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'destination_airport_id' => $this->contract->arr_airport_id,
            'departure_airport_id' => $this->contract->dep_airport_id,
            'aircraft_id' => $rental->id,
            'is_rental' => true
        ]);

        $this->pirepCargo = PirepCargo::factory()->create([
            'pirep_id' => $this->pirep->id,
            'contract_cargo_id' => $this->contractCargo->id
        ]);

        Sanctum::actingAs(
            $this->user,
            ['*']
        );

        $response = $this->getJson('/api/dispatch');
        $response->assertStatus(200);
        $response->assertJsonFragment(['departure_airport_id' => $this->pirep->departure_airport_id]);
    }
}
