<?php

namespace Tests\Feature\Api\Tracker;

use App\Models\Aircraft;
use App\Models\Booking;
use App\Models\Fleet;
use App\Models\Flight;
use App\Models\Pirep;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use PhpParser\Node\Expr\AssignOp\Mod;
use Tests\TestCase;

class GetDispatchedBookingsTest extends TestCase
{
    use RefreshDatabase;

    protected Model $user;
    protected Model $aircraft;
    protected Model $flight;
    protected Model $booking;
    protected Model $pirep;
    protected Model $fleet;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create([
            'current_airport_id' => 'AYMR'
        ]);
        $this->fleet = Fleet::factory()->create();
        $this->aircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id
        ]);
        $this->flight = Flight::factory()->create([
            'dep_airport_id' => 'AYMR'
        ]);
        $this->booking = Booking::factory()->create([
            'flight_id' => $this->flight->id,
            'user_id' => $this->user->id
        ]);
        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $this->flight->id,
            'booking_id' => $this->booking->id,
            'aircraft_id' => $this->aircraft
        ]);

        $this->booking->has_dispatch = $this->pirep->id;
        $this->booking->save();

    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_returns_one_booking()
    {
        Sanctum::actingAs(
            $this->user,
            ['*']
        );

        $response = $this->getJson('/api/bookings');
         $response->assertStatus(200);
        $response->assertJsonCount(1);
    }

    public function test_returns_bookings_only_from_current_location()
    {
        $user = User::factory()->create([
            'current_airport_id' => 'WAJJ'
        ]);

        $flight = Flight::factory()->create([
            'dep_airport_id' => 'WAJJ'
        ]);
        $booking = Booking::factory()->create([
            'flight_id' => $flight->id,
            'user_id' => $user->id
        ]);
        $pirep = Pirep::factory()->create([
            'user_id' => $user->id,
            'flight_id' => $flight->id,
            'booking_id' => $booking->id,
            'aircraft_id' => $this->aircraft
        ]);


        Sanctum::actingAs(
            $user,
            ['*']
        );

        $response = $this->getJson('/api/bookings');
        $response->assertStatus(200);
        $response->assertJsonCount(1);
    }

    public function test_returns_no_bookings_if_at_different_location()
    {
        $user = User::factory()->create([
            'current_airport_id' => 'EGLL'
        ]);

        $flight = Flight::factory()->create([
            'dep_airport_id' => 'WAJJ'
        ]);
        $booking = Booking::factory()->create([
            'flight_id' => $flight->id,
            'user_id' => $user->id
        ]);
        $pirep = Pirep::factory()->create([
            'user_id' => $user->id,
            'flight_id' => $flight->id,
            'booking_id' => $booking->id,
            'aircraft_id' => $this->aircraft
        ]);


        Sanctum::actingAs(
            $user,
            ['*']
        );

        $response = $this->getJson('/api/bookings');
        $response->assertStatus(200);
        $response->assertJsonCount(0);
    }

    public function test_returns_multiple_bookings()
    {
        $aircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id
        ]);
        $flight = Flight::factory()->create();
        $booking = Booking::factory()->create([
            'flight_id' => $flight->id,
            'user_id' => $this->user->id
        ]);
        $pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $flight->id,
            'booking_id' => $booking->id,
            'aircraft_id' => $aircraft
        ]);

        $booking->has_dispatch = $pirep->id;
        $booking->save();

        Sanctum::actingAs(
            $this->user,
            ['*']
        );

        $response = $this->getJson('/api/bookings');
        $response->assertStatus(200);
        $response->assertJsonCount(2);
    }

    public function test_returns_zero_bookings()
    {
        Sanctum::actingAs(
            User::factory()->create(),
            ['*']
        );

        $response = $this->getJson('/api/bookings');
        $response->assertStatus(200);
        $response->assertJsonCount(0);
    }
}
