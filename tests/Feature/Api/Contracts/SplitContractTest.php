<?php

namespace Tests\Feature\Api\Contracts;

use App\Models\Airport;
use App\Models\Contract;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Ramsey\Uuid\Uuid;
use Tests\TestCase;

class SplitContractTest extends TestCase
{
    use RefreshDatabase;
    protected Model $contract;
    protected Model $paxContract;
    protected Model $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();

        $this->contract = Contract::factory()->create([
            'cargo_qty' => 3800,
            'cargo_type' => 1,
            'payload' => 3800,
            'contract_value' => 6525,
            'current_airport_id' => Airport::factory()
        ]);
        $this->paxContract = Contract::factory()->create([
            'cargo_qty' => 5,
            'cargo_type' => 2,
            'pax' => 5,
            'contract_value' => 1000,
            'current_airport_id' => $this->contract->current_airport_id
        ]);

        Sanctum::actingAs(
            $this->user,
            ['*']
        );
    }
    /**
     * A basic feature test example.
     */
    public function test_split_cargo_qty_successful(): void
    {
        $data = [
            'id' => $this->contract->id,
            'qty' => 1900
        ];
        $response = $this->postJson('/api/contracts/split', $data);

        $response->assertStatus(200);
        $this->assertDatabaseHas('contracts', [
            'cargo_qty' => 1900,
            'payload' => 1900,
            'dep_airport_id' => $this->contract->dep_airport_id,
            'current_airport_id' => $this->contract->current_airport_id,
            'arr_airport_id' => $this->contract->arr_airport_id,
        ]);
        $this->assertDatabaseHas('contracts', [
            'cargo_qty' => 1900,
            'payload' => 1900,
            'dep_airport_id' => $this->contract->dep_airport_id,
            'current_airport_id' => $this->contract->current_airport_id,
            'arr_airport_id' => $this->contract->arr_airport_id,
        ]);
    }

    public function test_split_pax_qty_successful(): void
    {
        $data = [
            'id' => $this->paxContract->id,
            'qty' => 3
        ];
        $response = $this->postJson('/api/contracts/split', $data);

        $response->assertStatus(200);
        $this->assertDatabaseHas('contracts', [
            'cargo_qty' => 3,
            'pax' => 3,
            'dep_airport_id' => $this->paxContract->dep_airport_id,
            'current_airport_id' => $this->paxContract->current_airport_id,
            'arr_airport_id' => $this->paxContract->arr_airport_id,
        ]);
        $this->assertDatabaseHas('contracts', [
            'cargo_qty' => 2,
            'pax' => 2,
            'dep_airport_id' => $this->paxContract->dep_airport_id,
            'current_airport_id' => $this->paxContract->current_airport_id,
            'arr_airport_id' => $this->paxContract->arr_airport_id,
        ]);
    }

    public function test_split_cargo_contract_value_successful(): void
    {
        $data = [
            'id' => $this->contract->id,
            'qty' => 1900
        ];
        $response = $this->postJson('/api/contracts/split', $data);

        $response->assertStatus(200);
        $this->assertDatabaseHas('contracts', [
            'contract_value' => 3262.5
        ]);
        $this->assertDatabaseHas('contracts', [
            'contract_value' => 3262.5
        ]);
    }

    public function test_split_pax_contract_value_successful(): void
    {
        $data = [
            'id' => $this->paxContract->id,
            'qty' => 3
        ];
        $response = $this->postJson('/api/contracts/split', $data);

        $response->assertStatus(200);
        $this->assertDatabaseHas('contracts', [
            'contract_value' => 600
        ]);
        $this->assertDatabaseHas('contracts', [
            'contract_value' => 400
        ]);
    }

    public function test_split_on_contract_in_progress_fails()
    {
        $id = Uuid::uuid4();
        $c = Contract::factory()->create([
            'cargo_qty' => 3800,
            'cargo_type' => 1,
            'payload' => 3800,
            'contract_value' => 6525,
            'active_pirep' => $id
        ]);

        $data = [
            'id' => $c->id,
            'qty' => 3
        ];
        $response = $this->postJson('/api/contracts/split', $data);
        $response->assertStatus(422);
        $response->assertJson(['message' => 'Contract is in progress']);
    }

    function test_only_split_own_contracts()
    {
        $otherUser = User::factory()->create();
        $data = [
            'id' => $this->contract->id,
            'qty' => 1900
        ];
        $response = $this->postJson('/api/contracts/split', $data);
        $response->assertStatus(200);

        $this->paxContract->user_id = $otherUser->id;
        $this->paxContract->save();

        $data = [
            'id' => $this->paxContract->id,
            'qty' => 3
        ];
        $response = $this->postJson('/api/contracts/split', $data);
        $response->assertStatus(403);
    }
}
