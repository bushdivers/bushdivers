<?php

namespace Tests\Unit\Finance;

use App\Models\Enums\TransactionTypes;
use App\Models\User;
use App\Services\Finance\GetUserBalance;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class GetUserBalanceTest extends TestCase
{
    use RefreshDatabase;

    protected Model $user;
    protected GetUserBalance $getUserBalance;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
        $this->getUserBalance = $this->app->make(GetUserBalance::class);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_get_user_balance_returns_zero_when_nothing()
    {
        $total = $this->getUserBalance->execute($this->user->id);
        $this->assertEquals(0, $total);
    }

    public function test_get_user_balance_returns_correct_value()
    {
        DB::table('user_accounts')->insert([
            ['user_id' => $this->user->id, 'type' => TransactionTypes::Jumpseat, 'total' => -250],
            ['user_id' => $this->user->id, 'type' => TransactionTypes::Bonus, 'total' => 800]
        ]);

        $total = DB::table('user_accounts')
            ->where('user_id', $this->user->id)
            ->sum('total');

        $actual = $this->getUserBalance->execute($this->user->id);
        $this->assertEquals($total, $actual);
    }
}
