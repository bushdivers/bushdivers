<?php

namespace Tests\Unit\Models;

use App\Models\Airport;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Location\Coordinate;
use Tests\TestCase;

class AirportTest extends TestCase
{
    use RefreshDatabase;

    protected Airport $baseAirport;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Airport::factory()->create([
            'identifier' => 'AYMH',
            'lat' => -5.82781,
            'lon' => 144.29953,
            'is_hub' => false
        ]);
        Airport::factory()->create([
            'identifier' => 'AYFO',
            'lat' => -6.50917,
            'lon' => 143.07904,
            'is_hub' => false
        ]);

        $this->baseAirport = Airport::factory()->create([
            'identifier' => 'AYMR',
            'lat' => -6.36188,
            'lon' => 143.23070,
            'is_hub' => false
        ]);
    }

    /**
     * A basic unit test example.
     */
    public function test_finds_airport_in_range(): void
    {
        $this->assertEquals(0, Airport::inRangeOf($this->baseAirport, 1, 10)->count());
        $this->assertEquals(1, Airport::inRangeOf($this->baseAirport, 1, 14)->count());
        $this->assertEquals(1, Airport::inRangeOf($this->baseAirport, 1, 70)->count());
        $this->assertEquals(2, Airport::inRangeOf($this->baseAirport, 1, 73)->count());
    }

    public function test_finds_no_airport_out_of_range(): void
    {
        $this->assertEquals(0, Airport::inRangeOf($this->baseAirport, 201, 300)->count());
    }

    public function test_finds_hub_in_range(): void
    {
        $this->assertGreaterThan(0, Airport::inRangeOf($this->baseAirport, 1, 200)->count());
        $this->assertEquals(0, Airport::inRangeOf($this->baseAirport, 1, 200)->hub()->count());

        Airport::factory()->create([
            'identifier' => 'AYMH_',
            'lat' => -5.82781,
            'lon' => 144.29953,
            'is_hub' => true
        ]);

        $this->assertEquals(1, Airport::inRangeOf($this->baseAirport, 1, 200)->hub()->count());
    }

    public function test_nearest_airport()
    {
        $coord = new Coordinate(-6.36323, 143.24665);
        $airport = Airport::inRangeOf($coord, 0, 50)->orderBy('distance')->first();
        $this->assertEquals('AYMR', $airport->identifier);

        $coord = new Coordinate(-5.82781, 144.29953);
        $airport = Airport::inRangeOf($coord, 0, 50)->orderBy('distance')->first();
        $this->assertEquals('AYMH', $airport->identifier);
    }

    public function test_none_returned_if_not_found()
    {
        $lat = 51.47750;
        $lon = -0.46139;
        $coord = new Coordinate($lat, $lon);
        $airport = Airport::inRangeOf($coord, 0, 3)->orderBy('distance')->first();
        $this->assertEquals(null, $airport);
    }

    public function test_has_fuel_scope()
    {
        $airport = Airport::factory()->create([
            'identifier' => 'AYMH_',
            'lat' => -5.82781,
            'lon' => 144.29953,
            'has_jetfuel' => false,
            'has_avgas' => false
        ]);

        $this->assertNotNull(Airport::where('id', $airport->id)->first());
        $this->assertNull(Airport::where('id', $airport->id)->fuel()->first());

        $airport->has_avgas = true;
        $airport->save();
        $this->assertNotNull(Airport::where('id', $airport->id)->fuel()->first());

        $airport->has_jetfuel = true;
        $airport->has_avgas = false;
        $airport->save();
        $this->assertNotNull(Airport::where('id', $airport->id)->fuel()->first());
    }



}
