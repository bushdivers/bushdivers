<?php

namespace Tests\Unit\Rentals;

use App\Models\Aircraft;
use App\Models\Enums\TransactionTypes;
use App\Models\Fleet;
use App\Models\Pirep;
use App\Models\Rental;
use App\Models\User;
use App\Services\Rentals\CheckRentalDailyFee;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CheckRentalDailyFeeTest extends TestCase
{
    use RefreshDatabase;

    protected Model $fleet;
    protected Model $aircraft;
    protected Model $user;
    protected CheckRentalDailyFee $checkRentalDailyFee;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->fleet = Fleet::factory()->create([
            'rental_cost' => 200.00
        ]);
        $this->user = User::factory()->create();
        $this->aircraft = Rental::factory()->create([
            'fleet_id' => $this->fleet->id,
            'user_id' => $this->user->id
        ]);

        $this->checkRentalDailyFee = $this->app->make(CheckRentalDailyFee::class);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_no_charge_made_for_rental_with_over_2_hours()
    {
        Pirep::factory()->create([
            'aircraft_id' => $this->aircraft->id,
            'user_id' => $this->user->id,
            'flight_time' => 250,
            'submitted_at' => Carbon::today()->addHours(3),
            'is_rental' => true,
        ]);

        $this->checkRentalDailyFee->execute();
        $this->assertDatabaseMissing('user_accounts', [
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Rental
        ]);
    }

    public function test_charge_made_for_rental_with_1_hour()
    {
        Pirep::factory()->create([
            'aircraft_id' => $this->aircraft->id,
            'user_id' => $this->user->id,
            'flight_time' => 60,
            'submitted_at' => Carbon::today()->addHours(3),
            'is_rental' => true,
        ]);

        $remainder = 60 / 120; // flight time / min time
        $charge = $this->fleet->rental_cost * $remainder;

        $this->checkRentalDailyFee->execute();
        $this->assertDatabaseHas('user_accounts', [
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Rental,
            'total'=> -$charge
        ]);
    }

    public function test_charge_made_for_rental_with_zero_hours()
    {
        $this->checkRentalDailyFee->execute();
        $this->assertDatabaseHas('user_accounts', [
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Rental,
            'total'=> -$this->fleet->rental_cost
        ]);
    }
}
