<?php

namespace Tests\Unit\Rentals;

use App\Models\Aircraft;
use App\Models\Enums\TransactionTypes;
use App\Models\Fleet;
use App\Models\User;
use App\Services\Rentals\StartRental;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class StartRentalTest extends TestCase
{
    use RefreshDatabase;

    protected Model $aircraft;
    protected Model $fleet;
    protected Model $user;
    protected StartRental $startRental;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
        $this->fleet = Fleet::factory()->create([
            'rental_cost' => 100.00
        ]);
        $this->aircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id,
            'is_rental' => true,
            'hub_id' => 'AYMR'
        ]);

        $this->startRental = $this->app->make(StartRental::class);

        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 1500.00
        ]);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_insufficient_funds_returns_false()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => -1000.00
        ]);

        $result = $this->startRental->execute($this->aircraft->id, $this->user->id);
        $this->assertFalse($result);
    }

    public function test_successful_process_returns_true()
    {
        $result = $this->startRental->execute($this->aircraft->id, $this->user->id);
        $this->assertTrue($result);
    }

    public function test_aircraft_assigned_to_user()
    {
        $this->startRental->execute($this->aircraft->id, $this->user->id);
        $this->aircraft->refresh();
        $this->assertEquals($this->user->id, $this->aircraft->user_id);
    }

    public function test_account_transaction_added()
    {
        $this->startRental->execute($this->aircraft->id, $this->user->id);
        $this->assertDatabaseHas('user_accounts', [
           'user_id' => $this->user->id,
           'type' => TransactionTypes::Rental,
           'total' => -1000
        ]);
    }
}
