<?php

namespace Tests\Unit\Rentals;

use App\Models\Aircraft;
use App\Models\Airport;
use App\Models\Enums\TransactionTypes;
use App\Models\Fleet;
use App\Models\Rental;
use App\Models\User;
use App\Services\Rentals\StartRental;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class StartRentalTest extends TestCase
{
    use RefreshDatabase;

    protected Model $aircraft;
    protected Model $fleet;
    protected Model $user;
    protected StartRental $startRental;
    protected Model $usHub;
    protected Model $pngHub;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
        $this->fleet = Fleet::factory()->create([
            'rental_cost' => 100.00
        ]);

        $this->usHub = Airport::factory()->create([
            'identifier' => 'PAMX',
            'country' => 'US'
        ]);

        $this->pngHub = Airport::factory()->create([
            'identifier' => 'AYMR',
            'country' => 'PG'
        ]);

        $this->startRental = $this->app->make(StartRental::class);

        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 1500.00
        ]);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_insufficient_funds_returns_false()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => -1000.00
        ]);

        $result = $this->startRental->execute($this->fleet->id, $this->user->id, 'AYMR');
        $this->assertFalse($result);
    }

    public function test_successful_process_returns_true()
    {
        $result = $this->startRental->execute($this->fleet->id, $this->user->id, 'AYMR');
        $this->assertTrue($result);
    }

    public function test_aircraft_assigned_to_user()
    {
        $this->startRental->execute($this->fleet->id, $this->user->id, 'AYMR');
        $this->assertDatabaseHas('rentals', [
            'user_id' => $this->user->id
        ]);
    }

    public function test_registration_generated_usa()
    {
        $this->startRental->execute($this->fleet->id, $this->user->id, 'PAMX');
        $rental = Rental::where('user_id', $this->user->id)->first();

        $this->assertMatchesRegularExpression('/([N])([0-9]){3}([R])/', $rental->registration);
    }

    public function test_registration_generated_png()
    {
        $this->startRental->execute($this->fleet->id, $this->user->id, 'AYMR');
        $rental = Rental::where('user_id', $this->user->id)->first();
        $this->assertMatchesRegularExpression('/([P])([2])([\-])([R])([0-9]){2}/', $rental->registration);
    }

    public function test_account_transaction_added()
    {
        $this->startRental->execute($this->fleet->id, $this->user->id, 'AYMR');
        $this->assertDatabaseHas('user_accounts', [
           'user_id' => $this->user->id,
           'type' => TransactionTypes::Rental,
           'total' => -1000
        ]);
    }
}
