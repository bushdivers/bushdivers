<?php

namespace Tests\Unit\Services\Financial;

use App\Models\Aircraft;
use App\Models\AirlineFees;
use App\Models\Contract;
use App\Models\ContractCargo;
use App\Models\Enums\AirlineTransactionTypes;
use App\Models\Fleet;
use App\Models\Pirep;
use App\Models\PirepCargo;
use App\Services\FinancialsService;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class LandingFeeTest extends TestCase
{
    use RefreshDatabase;

    protected FinancialsService $financialsService;
    protected Model $pirep;
    protected Model $fleetSmall;
    protected Model $fleetMedium;
    protected Model $fleetLarge;
    protected Model $aircraftSmall;
    protected Model $aircraftMedium;
    protected Model $aircraftLarge;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->financialsService = new FinancialsService();

        $this->fleetSmall = Fleet::factory()->create(['size' => 'S']);
        $this->fleetMedium = Fleet::factory()->create(['size' => 'M']);
        $this->fleetLarge = Fleet::factory()->create(['size' => 'L']);
        $this->aircraftSmall = Aircraft::factory()->create([
            'registration' => 'P2-SM',
            'fleet_id' => $this->fleetSmall->id
        ]);
        $this->aircraftMedium = Aircraft::factory()->create([
            'registration' => 'P2-MD',
            'fleet_id' => $this->fleetMedium->id
        ]);
        $this->aircraftLarge = Aircraft::factory()->create([
            'registration' => 'P2-LG',
            'fleet_id' => $this->fleetLarge->id
        ]);

        AirlineFees::factory()->create([
            'fee_type' => AirlineTransactionTypes::LandingFees,
            'fee_name' => 'Landing Fees - Small',
            'fee_amount' => 35.00
        ]);
        AirlineFees::factory()->create([
            'fee_type' => AirlineTransactionTypes::LandingFees,
            'fee_name' => 'Landing Fees - Medium',
            'fee_amount' => 100.00
        ]);
        AirlineFees::factory()->create([
            'fee_type' => AirlineTransactionTypes::LandingFees,
            'fee_name' => 'Landing Fees - Large',
            'fee_amount' => 250.00
        ]);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_small_landing_fee_calculated()
    {
        $pirep = Pirep::factory()->create([
            'aircraft_id' => $this->aircraftSmall->id
        ]);
        $this->financialsService->calcLandingFee($pirep);
        $this->assertDatabaseHas('account_ledgers', [
            'transaction_type' => AirlineTransactionTypes::LandingFees,
            'memo' => 'Landing Fees - Small',
            'pirep_id' => $pirep->id,
            'total' => -35
        ]);
    }

    public function test_medium_landing_fee_calculated()
    {
        $pirep = Pirep::factory()->create([
            'aircraft_id' => $this->aircraftMedium->id
        ]);
        $this->financialsService->calcLandingFee($pirep);
        $this->assertDatabaseHas('account_ledgers', [
            'transaction_type' => AirlineTransactionTypes::LandingFees,
            'memo' => 'Landing Fees - Medium',
            'pirep_id' => $pirep->id,
            'total' => -100
        ]);
    }

    public function test_large_landing_fee_calculated()
    {
        $pirep = Pirep::factory()->create([
            'aircraft_id' => $this->aircraftLarge->id
        ]);
        $this->financialsService->calcLandingFee($pirep);
        $this->assertDatabaseHas('account_ledgers', [
            'transaction_type' => AirlineTransactionTypes::LandingFees,
            'memo' => 'Landing Fees - Large',
            'pirep_id' => $pirep->id,
            'total' => -250
        ]);
    }
}
