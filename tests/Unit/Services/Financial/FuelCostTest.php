<?php

namespace Tests\Unit\Services\Financial;

use App\Models\Aircraft;
use App\Models\AirlineFees;
use App\Models\Enums\AirlineTransactionTypes;
use App\Models\Fleet;
use App\Models\Pirep;
use App\Services\FinancialsService;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class FuelCostTest extends TestCase
{
    use RefreshDatabase;

    protected FinancialsService $financialsService;
    protected Model $fleetAvGas;
    protected Model $fleetJetFuel;
    protected Model $aircraftAvGas;
    protected Model $aircraftJetFuel;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->financialsService = new FinancialsService();
        $this->fleetAvGas = Fleet::factory()->create(['fuel_type' => 1, 'type' => 'C172']);
        $this->fleetJetFuel = Fleet::factory()->create(['fuel_type' => 2, 'type' => 'C208']);
        $this->aircraftAvGas = Aircraft::factory()->create([
            'registration' => 'P2-SM',
            'fleet_id' => $this->fleetAvGas->id
        ]);
        $this->aircraftJetFuel = Aircraft::factory()->create([
            'registration' => 'P2-MD',
            'fleet_id' => $this->fleetJetFuel->id
        ]);
        AirlineFees::factory()->create([
            'fee_type' => AirlineTransactionTypes::FuelFees,
            'fee_name' => 'Avgas',
            'fee_amount' => 2.15
        ]);
        AirlineFees::factory()->create([
            'fee_type' => AirlineTransactionTypes::FuelFees,
            'fee_name' => 'Jet Fuel',
            'fee_amount' => 1.20
        ]);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_avgas_is_calculated()
    {
        $pirep = Pirep::factory()->create([
            'aircraft_id' => $this->aircraftAvGas->id,
            'fuel_used' => 50
        ]);

        $cost = 50 * 2.15;
        $this->financialsService->calcFuelUsedFee($pirep);
        $this->assertDatabaseHas('account_ledgers', [
            'transaction_type' => AirlineTransactionTypes::FuelFees,
            'total' => -$cost,
            'pirep_id' => $pirep->id,
            'memo' => 'Fuel Cost'
        ]);
    }

    public function test_jetfuel_is_calculated()
    {
        $pirep = Pirep::factory()->create([
            'aircraft_id' => $this->aircraftJetFuel->id,
            'fuel_used' => 50
        ]);

        $cost = 50 * 1.20;
        $this->financialsService->calcFuelUsedFee($pirep);
        $this->assertDatabaseHas('account_ledgers', [
            'transaction_type' => AirlineTransactionTypes::FuelFees,
            'total' => -$cost,
            'pirep_id' => $pirep->id,
            'memo' => 'Fuel Cost'
        ]);
    }
}
