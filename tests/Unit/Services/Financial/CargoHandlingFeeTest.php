<?php

namespace Tests\Unit\Services\Financial;

use App\Models\Aircraft;
use App\Models\AirlineFees;
use App\Models\Airport;
use App\Models\Contract;
use App\Models\ContractCargo;
use App\Models\Enums\AirlineTransactionTypes;
use App\Models\Fleet;
use App\Models\Pirep;
use App\Models\PirepCargo;
use App\Services\FinancialsService;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CargoHandlingFeeTest extends TestCase
{

    use RefreshDatabase;

    protected FinancialsService $financialsService;
    protected Model $contract;
    protected Model $contractCargo;
    protected Model $pirep;
    protected Model $pirepCargo;
    protected Model $fleet;
    protected Model $airport;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->financialsService = $this->app->make(FinancialsService::class);
        $this->contract = Contract::factory()->create();
        $this->contractCargo = ContractCargo::factory()->create([
            'contract_id' => $this->contract->id
        ]);
        $this->airport = Airport::factory()->create([
            'size' => 1
        ]);
        $this->pirep = Pirep::factory()->create([
            'destination_airport_id' => $this->airport->identifier
        ]);
        $this->pirepCargo = PirepCargo::factory()->create([
            'pirep_id' => $this->pirep->id,
            'contract_cargo_id' => $this->contractCargo->id
        ]);
        AirlineFees::factory()->create([
            'fee_type' => AirlineTransactionTypes::GroundHandlingFees,
            'fee_name' => 'Cargo Handling',
            'fee_weight' => 1,
            'fee_amount' => 0.15
        ]);
        $this->fleet = Fleet::factory()->create();
        Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id
        ]);

    }
    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_cargo_calculated()
    {
        $cost = $this->contractCargo->cargo_qty * 0.15;
        $this->financialsService->calcCargoHandling($this->pirep);
        $this->assertDatabaseHas('account_ledgers', [
            'memo' => 'Cargo Handling',
            'pirep_id' => $this->pirep->id,
            'total' => -$cost,
            'transaction_type' => AirlineTransactionTypes::GroundHandlingFees
        ]);
    }

    public function test_cargo_not_calculated_for_small_airport()
    {
        $airport = Airport::factory()->create([
            'size' => 1
        ]);
        $pirep = Pirep::factory()->create([
            'destination_airport_id' => $airport->identifier
        ]);
        $pirepCargo = PirepCargo::factory()->create([
            'pirep_id' => $pirep->id,
            'contract_cargo_id' => $this->contractCargo->id
        ]);

        $this->financialsService->calcCargoHandling($pirep);
        $this->assertDatabaseMissing('account_ledgers', [
            'memo' => 'Cargo Handling',
            'pirep_id' => $this->pirep->id,
            'transaction_type' => AirlineTransactionTypes::GroundHandlingFees
        ]);
    }
}
