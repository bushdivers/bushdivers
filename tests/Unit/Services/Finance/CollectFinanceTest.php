<?php

namespace Tests\Unit\Services\Finance;

use App\Models\Aircraft;
use App\Models\Enums\TransactionTypes;
use App\Models\FinanceAgreement;
use App\Models\Fleet;
use App\Models\Loan;
use App\Models\User;
use App\Services\Finance\CollectFinancePayments;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class CollectFinanceTest extends TestCase
{
    use RefreshDatabase;

    protected CollectFinancePayments $collectFinancePayments;
    protected Model $loan;
    protected Model $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->collectFinancePayments = $this->app->make(CollectFinancePayments::class);
        $this->user = User::factory()->create();
        $this->loan = Loan::factory()->create([
            'user_id' => $this->user->id,
            'next_payment_at' => Carbon::now(),
            'loan_amount' => 2000,
            'total_remaining' => 2200,
            'monthly_payment' => 220,
            'term_months' => 10,
            'term_remaining' => 10,
            'total_interest' => 200
        ]);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_full_loan_payment_collected()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 1000
        ]);
        $this->collectFinancePayments->execute();
        $this->loan->refresh();
        $this->assertEquals(1980, $this->loan->total_remaining);
        $this->assertEquals(9, $this->loan->term_remaining);
        $this->assertEquals(0, $this->loan->missed_payments);
        $this->assertEquals(Carbon::now()->addMonth()->endOfDay(), Carbon::parse($this->loan->next_payment_at)->endOfDay());

        $this->assertDatabaseHas('user_accounts', [
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Loan,
            'total' => -220
        ]);
    }

    public function test_only_remaining_loan_payment_collected()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 1000
        ]);

        $loan = Loan::factory()->create([
            'user_id' => $this->user->id,
            'next_payment_at' => Carbon::now(),
            'loan_amount' => 2000,
            'total_remaining' => 100,
            'monthly_payment' => 220,
            'term_months' => 10,
            'term_remaining' => 1,
            'total_interest' => 200
        ]);

        $this->collectFinancePayments->execute();
        $loan->refresh();
        $this->assertEquals(0, $loan->total_remaining);
        $this->assertEquals(0, $loan->term_remaining);
        $this->assertEquals(0, $loan->missed_payments);
        $this->assertEquals(true, $loan->is_paid);

        $this->assertDatabaseHas('user_accounts', [
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Loan,
            'total' => -100
        ]);
    }

    public function test_finance_missed_due_to_insufficient_funds()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 10
        ]);
        $this->collectFinancePayments->execute();
        $this->loan->refresh();
        $this->assertEquals(2200, $this->loan->total_remaining);
        $this->assertEquals(1, $this->loan->missed_payments);
    }

    public function test_finance_completed()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 1000
        ]);

        $finance = Loan::factory()->create([
            'user_id' => $this->user->id,
            'loan_amount' => 1000,
            'total_interest' => 100,
            'total_remaining' => 100,
            'term_months' => 10,
            'term_remaining' => 1,
            'monthly_payment' => 100,
            'missed_payments' => 0,
            'next_payment_at' => Carbon::now()
        ]);
        $this->collectFinancePayments->execute();
        $finance->refresh();
        $this->assertEquals(0, $finance->total_remaining);
        $this->assertEquals(0, $finance->term_remaining);
        $this->assertEquals(true, $finance->is_paid);
    }

    public function test_nothing_to_collect()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 1000
        ]);

        $finance = Loan::factory()->create([
            'user_id' => $this->user->id,
            'loan_amount' => 1000,
            'total_interest' => 100,
            'total_remaining' => 1100,
            'term_months' => 10,
            'term_remaining' => 10,
            'monthly_payment' => 100,
            'missed_payments' => 0,
            'next_payment_at' => Carbon::now()->addMonths(3)
        ]);
        $this->collectFinancePayments->execute();
        $finance->refresh();
        $this->assertEquals(1100, $finance->total_remaining);
        $this->assertEquals(10, $finance->term_remaining);
    }

    public function test_defaulted()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 10
        ]);

        $finance = Loan::factory()->create([
            'user_id' => $this->user->id,
            'loan_amount' => 1000,
            'total_interest' => 100,
            'total_remaining' => 1100,
            'term_months' => 10,
            'term_remaining' => 10,
            'monthly_payment' => 100,
            'missed_payments' => 3,
            'next_payment_at' => Carbon::now()
        ]);

        $this->collectFinancePayments->execute();
        $finance->refresh();
        $this->assertEquals(4, $finance->missed_payments);

        $this->assertDatabaseHas('users', [
            'id' => $this->user->id,
            'is_defaulted' => true
        ]);
    }
}
