<?php

namespace Tests\Unit\Services\Finance;

use App\Models\Aircraft;
use App\Models\Enums\TransactionTypes;
use App\Models\FinanceAgreement;
use App\Models\Fleet;
use App\Models\User;
use App\Services\Finance\CollectFinancePayments;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class CollectFinanceTest extends TestCase
{
    use RefreshDatabase;

    protected CollectFinancePayments $collectFinancePayments;
    protected Model $financeAgreement;
    protected Model $aircraft;
    protected Model $fleet;
    protected Model $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->collectFinancePayments = $this->app->make(CollectFinancePayments::class);
        $this->user = User::factory()->create();
        $this->fleet = Fleet::factory()->create();
        $this->aircraft = Aircraft::factory()->create([
            'owner_id' => $this->user->id,
            'fleet_id' => $this->fleet->id
        ]);
        $this->financeAgreement = FinanceAgreement::factory()->create([
            'user_id' => $this->user->id,
            'aircraft_id' => $this->aircraft->id
        ]);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_finance_updated()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 100000
        ]);
        $this->collectFinancePayments->execute();
        $this->financeAgreement->refresh();
        $this->assertEquals(900, $this->financeAgreement->amount_remaining);
        $this->assertEquals(9, $this->financeAgreement->term_remaining);
        $this->assertEquals(0, $this->financeAgreement->missed_payments);
    }

    public function test_finance_missed()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 10
        ]);
        $this->collectFinancePayments->execute();
        $this->financeAgreement->refresh();
        $this->assertEquals(1000, $this->financeAgreement->amount_remaining);
        $this->assertEquals(1, $this->financeAgreement->missed_payments);
    }

    public function test_finance_completed()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 1000
        ]);

        $aircraft = Aircraft::factory()->create([
            'owner_id' => $this->user->id,
            'fleet_id' => $this->fleet->id,
            'registration' => 'G-RWW'
        ]);

        $finance = FinanceAgreement::factory()->create([
            'user_id' => $this->user->id,
            'aircraft_id' => $aircraft->id,
            'amount_remaining' => 100,
            'term_remaining' => 1,
            'monthly_payments' => 100
        ]);
        $this->collectFinancePayments->execute();
        $finance->refresh();
        $this->assertEquals(0, $finance->amount_remaining);
        $this->assertEquals(0, $finance->term_remaining);
        $this->assertEquals(true, $finance->is_paid);
    }

    public function test_aircraft_reclaimed()
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'type' => TransactionTypes::Bonus,
            'total' => 90
        ]);

        $aircraft = Aircraft::factory()->create([
            'owner_id' => $this->user->id,
            'fleet_id' => $this->fleet->id,
            'registration' => 'G-RWW'
        ]);

        $finance = FinanceAgreement::factory()->create([
            'user_id' => $this->user->id,
            'aircraft_id' => $aircraft->id,
            'amount_remaining' => 100,
            'term_remaining' => 3,
            'monthly_payments' => 100,
            'missed_payments' => 3
        ]);
        $this->collectFinancePayments->execute();
        $finance->refresh();
        $aircraft->refresh();
        $this->assertEquals(0, $finance->is_active);
        $this->assertEquals(null, $aircraft->owner_id);
    }
}
