<?php

namespace Tests\Unit\Services\Pirep;

use App\Models\Aircraft;
use App\Models\Booking;
use App\Models\Enums\PointsType;
use App\Models\Fleet;
use App\Models\Flight;
use App\Models\Pirep;
use App\Models\User;
use App\Services\PirepService;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Event;
use Tests\TestCase;

class CalculatePointsTest extends TestCase
{
    use RefreshDatabase;

    protected Model $user;
    protected Model $pirep;
    protected Model $flight;
    protected Model $booking;
    protected Model $fleet;
    protected Model $aircraft;
    protected PirepService $pirepService;

    protected function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub
        Artisan::call('db:seed --class=RankSeeder');
        $this->pirepService = new PirepService();
        $this->user = User::factory()->create([
            'rank_id' => 1
        ]);
        $this->fleet = Fleet::factory()->create();
        $this->aircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id
        ]);
        $this->flight = Flight::factory()->create();
        $this->booking = Booking::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $this->flight->id,
        ]);
        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $this->flight->id,
            'aircraft_id' => $this->aircraft->id,
            'booking_id' => $this->booking->id
        ]);
    }
    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_completed_flight_points()
    {
        $this->pirepService->calculatePoints($this->pirep);
        $this->assertDatabaseHas('points', [
            'pirep_id' => $this->pirep->id,
            'type_name' => PointsType::COMPLETED_FLIGHT_LABEL,
            'points' => PointsType::COMPLETED_FLIGHT
        ]);
    }

    public function test_hub_points_for_flight_inc_hub()
    {
        $flight = Flight::factory()->create([
            'dep_airport_id' => $this->user->hub_id
        ]);
        $pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $flight->id,
            'aircraft_id' => $this->aircraft->id,
            'booking_id' => $this->booking->id
        ]);
        $this->pirepService->calculatePoints($pirep);
        $this->assertDatabaseHas('points', [
            'pirep_id' => $pirep->id,
            'type_name' => PointsType::HOME_HUB_LABEL,
            'points' => PointsType::HOME_HUB
        ]);
    }

    public function test_hub_points_for_flight_exc_hub()
    {
        $flight = Flight::factory()->create([
            'dep_airport_id' => 'EGLL',
            'arr_airport_id' => 'LFPG'
        ]);
        $pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $flight->id,
            'aircraft_id' => $this->aircraft->id,
            'booking_id' => $this->booking->id
        ]);
        $this->pirepService->calculatePoints($pirep);
        $this->assertDatabaseMissing('points', [
            'pirep_id' => $pirep->id,
            'type_name' => PointsType::HOME_HUB_LABEL,
            'points' => PointsType::HOME_HUB
        ]);
    }

    public function test_time_points_one_hour()
    {
        $pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $this->flight->id,
            'aircraft_id' => $this->aircraft->id,
            'booking_id' => $this->booking->id,
            'flight_time' => 60
        ]);

        $time = floor(60 / 60);
        $expected = PointsType::ONE_HOUR * $time;
        $this->pirepService->calculatePoints($pirep);
        $this->assertDatabaseHas('points', [
            'pirep_id' => $pirep->id,
            'type_name' => PointsType::ONE_HOUR_LABEL,
            'points' => $expected
        ]);
    }

    public function test_time_points_one_hour_thirty_mins()
    {
        $pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $this->flight->id,
            'aircraft_id' => $this->aircraft->id,
            'booking_id' => $this->booking->id,
            'flight_time' => 90
        ]);

        $expected = 1;
        $this->pirepService->calculatePoints($pirep);
        $this->assertDatabaseHas('points', [
            'pirep_id' => $pirep->id,
            'type_name' => PointsType::ONE_HOUR_LABEL,
            'points' => $expected
        ]);
    }

    public function test_time_points_under_one_hour()
    {
        $pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $this->flight->id,
            'aircraft_id' => $this->aircraft->id,
            'booking_id' => $this->booking->id,
            'flight_time' => 45
        ]);

        $expected = 0;
        $this->pirepService->calculatePoints($pirep);
        $this->assertDatabaseHas('points', [
            'pirep_id' => $pirep->id,
            'type_name' => PointsType::ONE_HOUR_LABEL,
            'points' => $expected
        ]);
    }

    public function test_distance_points_under_50()
    {
        $pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $this->flight->id,
            'aircraft_id' => $this->aircraft->id,
            'booking_id' => $this->booking->id,
            'distance' => 45
        ]);

        $expected = 0;
        $this->pirepService->calculatePoints($pirep);
        $this->assertDatabaseHas('points', [
            'pirep_id' => $pirep->id,
            'type_name' => PointsType::FIFTY_MILES_LABEL,
            'points' => $expected
        ]);
    }

    public function test_distance_points_100()
    {
        $pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $this->flight->id,
            'aircraft_id' => $this->aircraft->id,
            'booking_id' => $this->booking->id,
            'distance' => 100
        ]);

        $expected = 2;
        $this->pirepService->calculatePoints($pirep);
        $this->assertDatabaseHas('points', [
            'pirep_id' => $pirep->id,
            'type_name' => PointsType::FIFTY_MILES_LABEL,
            'points' => $expected
        ]);
    }

    public function test_distance_points_200()
    {
        $pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $this->flight->id,
            'aircraft_id' => $this->aircraft->id,
            'booking_id' => $this->booking->id,
            'distance' => 200
        ]);

        $expected = 4;
        $this->pirepService->calculatePoints($pirep);
        $this->assertDatabaseHas('points', [
            'pirep_id' => $pirep->id,
            'type_name' => PointsType::FIFTY_MILES_LABEL,
            'points' => $expected
        ]);
    }
}
