<?php

namespace Tests\Unit\Services\Pirep;

use App\Models\Enums\PointsType;
use App\Services\Pireps\CalculateLandingRatePoints;
use Tests\TestCase;

class CalculateLandingRatePointsTest extends TestCase
{
    protected CalculateLandingRatePoints $calculateLandingRatePoints;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->calculateLandingRatePoints = $this->app->make(CalculateLandingRatePoints::class);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_landing_rate_over_400()
    {
        $expected = PointsType::LANDING_RATE_OVER_400;
        $actual = $this->calculateLandingRatePoints->execute(500.24);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_300()
    {
        $expected = PointsType::LANDING_RATE_181_400;
        $actual = $this->calculateLandingRatePoints->execute(300.56);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_100()
    {
        $expected = PointsType::LANDING_RATE_61_180;
        $actual = $this->calculateLandingRatePoints->execute(100.21);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_60()
    {
        $expected = PointsType::LANDING_RATE_PERFECT_60;
        $actual = $this->calculateLandingRatePoints->execute(60.00);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_45()
    {
        $expected = PointsType::LANDING_RATE_40_59;
        $actual = $this->calculateLandingRatePoints->execute(45.01);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_6()
    {
        $expected = PointsType::LANDING_RATE_3_39;
        $actual = $this->calculateLandingRatePoints->execute(6.45);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_1()
    {
        $expected = PointsType::LANDING_RATE_0_2;
        $actual = $this->calculateLandingRatePoints->execute(1.89);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_minus()
    {
        $expected = PointsType::LANDING_RATE_BELOW_ZERO;
        $actual = $this->calculateLandingRatePoints->execute(-5.32);
        $this->assertEquals($expected, $actual['points']);
    }
}
