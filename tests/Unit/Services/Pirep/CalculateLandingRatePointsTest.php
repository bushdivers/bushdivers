<?php

namespace Tests\Unit\Services\Pirep;

use App\Models\Enums\PointsType;
use App\Services\PirepService;
use PHPUnit\Framework\TestCase;

class CalculateLandingRatePointsTest extends TestCase
{
    protected PirepService $pirepService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->pirepService = new PirepService();
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_landing_rate_over_400()
    {
        $expected = PointsType::LANDING_RATE_OVER_400;
        $actual = $this->pirepService->calculateLandingRatePoints(500);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_300()
    {
        $expected = PointsType::LANDING_RATE_181_400;
        $actual = $this->pirepService->calculateLandingRatePoints(300);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_100()
    {
        $expected = PointsType::LANDING_RATE_61_180;
        $actual = $this->pirepService->calculateLandingRatePoints(100);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_60()
    {
        $expected = PointsType::LANDING_RATE_PERFECT_60;
        $actual = $this->pirepService->calculateLandingRatePoints(60);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_45()
    {
        $expected = PointsType::LANDING_RATE_40_59;
        $actual = $this->pirepService->calculateLandingRatePoints(45);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_20()
    {
        $expected = PointsType::LANDING_RATE_3_39;
        $actual = $this->pirepService->calculateLandingRatePoints(6);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_1()
    {
        $expected = PointsType::LANDING_RATE_0_2;
        $actual = $this->pirepService->calculateLandingRatePoints(1);
        $this->assertEquals($expected, $actual['points']);
    }

    public function test_landing_rate_minus()
    {
        $expected = PointsType::LANDING_RATE_BELOW_ZERO;
        $actual = $this->pirepService->calculateLandingRatePoints(-20);
        $this->assertEquals($expected, $actual['points']);
    }
}
