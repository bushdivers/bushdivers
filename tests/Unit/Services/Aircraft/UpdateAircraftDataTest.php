<?php

namespace Tests\Unit\Services\Aircraft;

use App\Models\Aircraft;
use App\Models\Booking;
use App\Models\Enums\AircraftState;
use App\Models\Fleet;
use App\Models\Flight;
use App\Models\Pirep;
use App\Models\User;
use App\Services\AircraftService;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Artisan;
use Tests\TestCase;

class UpdateAircraftDataTest extends TestCase
{
    use RefreshDatabase;

    protected Model $user;
    protected Model $pirep;
    protected Model $flight;
    protected Model $booking;
    protected Model $fleet;
    protected Model $aircraft;
    protected AircraftService $aircraftService;

    protected function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create([
            'rank_id' => 1
        ]);
        $this->fleet = Fleet::factory()->create();
        $this->aircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id,
            'fuel_onboard' => 52
        ]);
        $this->flight = Flight::factory()->create();
        $this->booking = Booking::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $this->flight->id,
        ]);
        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'flight_id' => $this->flight->id,
            'aircraft_id' => $this->aircraft->id,
            'booking_id' => $this->booking->id,
            'flight_time' => 45
        ]);

        $this->aircraftService = new AircraftService();
    }
    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_aircraft_state_updated()
    {
        $state = AircraftState::IN_USE;
        $this->aircraftService->updateAircraftState($this->aircraft->id, $state);
        $this->assertDatabaseHas('aircraft', [
            'id' => $this->aircraft->id,
            'state' => $state
        ]);
    }

    public function test_aircraft_fuel_updated()
    {
        $this->aircraftService->updateAircraftFuel($this->aircraft->id, 20);
        $this->assertDatabaseHas('aircraft', [
            'id' => $this->aircraft->id,
            'fuel_onboard' => 52 - 20
        ]);
    }

    public function test_aircraft_fuel_remains_0_when_0_fuel()
    {
        $aircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id,
            'fuel_onboard' => 0
        ]);
        $this->aircraftService->updateAircraftFuel($aircraft->id, 20);
        $this->assertDatabaseHas('aircraft', [
            'id' => $aircraft->id,
            'fuel_onboard' => 0
        ]);
    }

    public function test_aircraft_hours_updated()
    {
        $this->aircraftService->updateAircraftHours($this->aircraft->id, 20);
        $this->assertDatabaseHas('aircraft', [
            'id' => $this->aircraft->id,
            'flight_time_mins' => $this->aircraft->flight_time_mins += 20
        ]);
    }

    public function test_aircraft_location_updated()
    {
        $icao = 'EGLL';
        $this->aircraftService->updateAircraftLocation($this->aircraft->id, $icao);
        $this->assertDatabaseHas('aircraft', [
            'id' => $this->aircraft->id,
            'current_airport_id' => $icao
        ]);
    }

    public function test_aircraft_last_flight_updated()
    {
        $date = Carbon::now();
        $this->aircraftService->updateAircraftLastFlightDate($this->aircraft->id, $date);
        $this->assertDatabaseHas('aircraft', [
            'id' => $this->aircraft->id,
            'last_flight' => $date
        ]);
    }

}
