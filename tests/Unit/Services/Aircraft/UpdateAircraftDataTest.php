<?php

namespace Tests\Unit\Services\Aircraft;

use App\Models\Aircraft;
use App\Models\Contract;
use App\Models\ContractCargo;
use App\Models\Enums\AircraftState;
use App\Models\Fleet;
use App\Models\Pirep;
use App\Models\PirepCargo;
use App\Models\User;
use App\Services\Aircraft\UpdateAircraftFuel;
use App\Services\Aircraft\UpdateAircraftHours;
use App\Services\Aircraft\UpdateAircraftLastFlight;
use App\Services\Aircraft\UpdateAircraftLocation;
use App\Services\Aircraft\UpdateAircraftState;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class UpdateAircraftDataTest extends TestCase
{
    use RefreshDatabase;

    protected Model $user;
    protected Model $pirep;
    protected Model $pirepCargo;
    protected Model $contract;
    protected Model $contractCargo;
    protected Model $fleet;
    protected Model $aircraft;
    protected Model $booking;
    protected UpdateAircraftState $updateAircraftState;
    protected UpdateAircraftFuel $updateAircraftFuel;
    protected UpdateAircraftHours $updateAircraftHours;
    protected UpdateAircraftLastFlight $updateAircraftLastFlight;
    protected UpdateAircraftLocation $updateAircraftLocation;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create([
            'rank_id' => 1,
            'flights_time' => 299,
            'points' => 49,
            'created_at' => Carbon::now()->addYears(-2)
        ]);
        $this->fleet = Fleet::factory()->create();
        $this->aircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id,
            'fuel_onboard' => 50,
            'current_airport_id' => 'AYMR',
            'user_id' => $this->user->id
        ]);
        DB::table('cargo_types')->insert([
            ['type' => 1, 'text' => 'Solar Panels'],
            ['type' => 1, 'text' => 'Building materials'],
            ['type' => 2, 'text' => 'Medics'],
            ['type' => 2, 'text' => 'Locals'],
        ]);

        $this->contract = Contract::factory()->create([
            'contract_value' => 250.00,
            'dep_airport_id' => 'AYMR',
            'arr_airport_id' => 'AYMN'
        ]);
        $this->contractCargo = ContractCargo::factory()->create([
            'contract_id' => $this->contract->id,
            'current_airport_id' => $this->contract->dep_airport_id
        ]);
        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'destination_airport_id' => $this->contract->arr_airport_id,
            'departure_airport_id' => $this->contract->dep_airport_id,
            'aircraft_id' => $this->aircraft
        ]);

        $this->pirepCargo = PirepCargo::factory()->create([
            'pirep_id' => $this->pirep->id,
            'contract_cargo_id' => $this->contractCargo->id
        ]);

        $this->updateAircraftState = $this->app->make(UpdateAircraftState::class);
        $this->updateAircraftFuel = $this->app->make(UpdateAircraftFuel::class);
        $this->updateAircraftLastFlight = $this->app->make(UpdateAircraftLastFlight::class);
        $this->updateAircraftLocation = $this->app->make(UpdateAircraftLocation::class);
        $this->updateAircraftHours = $this->app->make(UpdateAircraftHours::class);
    }
    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_aircraft_state_updated()
    {
        $state = AircraftState::IN_USE;
        $this->updateAircraftState->execute($this->aircraft->id, $state);
        $this->assertDatabaseHas('aircraft', [
            'id' => $this->aircraft->id,
            'state' => $state
        ]);
    }

    public function test_aircraft_fuel_updated()
    {
        $this->updateAircraftFuel->execute($this->aircraft->id, 20);
        $this->assertDatabaseHas('aircraft', [
            'id' => $this->aircraft->id,
            'fuel_onboard' => $this->aircraft->fuel_onboard - 20
        ]);
    }

    public function test_aircraft_fuel_remains_0_when_0_fuel()
    {
        $aircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id,
            'fuel_onboard' => 0,
            'registration' => 'N12345'
        ]);
        $this->updateAircraftFuel->execute($aircraft->id, 20);
        $this->assertDatabaseHas('aircraft', [
            'id' => $aircraft->id,
            'fuel_onboard' => 0
        ]);
    }

    public function test_aircraft_hours_updated()
    {
        $this->updateAircraftHours->execute($this->aircraft->id, 20);
        $this->assertDatabaseHas('aircraft', [
            'id' => $this->aircraft->id,
            'flight_time_mins' => $this->aircraft->flight_time_mins += 20
        ]);
    }

    public function test_aircraft_location_updated()
    {
        $icao = 'EGLL';
        $lat = -6.14617;
        $lon = 143.65733;
        $this->updateAircraftLocation->execute($this->aircraft->id, $icao, $lat, $lon);
        $this->assertDatabaseHas('aircraft', [
            'id' => $this->aircraft->id,
            'current_airport_id' => $icao,
            'last_lat' => -6.14617
        ]);
    }

    public function test_aircraft_last_flight_updated()
    {
        $date = Carbon::now();
        $this->updateAircraftLastFlight->execute($this->aircraft->id, $date);
        $this->assertDatabaseHas('aircraft', [
            'id' => $this->aircraft->id,
            'last_flight' => $date
        ]);
    }

}
