<?php

namespace Tests\Unit\Services\Aircraft;

use App\Models\Enums\MaintenanceCosts;
use App\Models\Enums\MaintenanceTypes;
use App\Services\Aircraft\GetMaintenanceCost;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class GetMaintenanceCostTest extends TestCase
{
    protected GetMaintenanceCost $getMaintenanceCost;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->getMaintenanceCost = app()->make(GetMaintenanceCost::class);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_cost_is_returned_for_100hr()
    {
        $cost = $this->getMaintenanceCost->execute(MaintenanceTypes::Maintenance100hr, 'S');
        $this->assertEquals(MaintenanceCosts::Cost100hr, $cost);
    }

    public function test_cost_is_returned_for_annual()
    {
        $cost = $this->getMaintenanceCost->execute(MaintenanceTypes::Annual, 'S');
        $this->assertEquals(MaintenanceCosts::CostAnnual, $cost);
    }

    public function test_cost_is_returned_for_tbo_s()
    {
        $cost = $this->getMaintenanceCost->execute(MaintenanceTypes::MaintenanceTBO, 'S');
        $this->assertEquals(MaintenanceCosts::CostTBOSmall, $cost);
    }

    public function test_cost_is_returned_for_tbo_m()
    {
        $cost = $this->getMaintenanceCost->execute(MaintenanceTypes::MaintenanceTBO, 'M');
        $this->assertEquals(MaintenanceCosts::CostTBOMedium, $cost);
    }

    public function test_cost_is_returned_for_tbo_l()
    {
        $cost = $this->getMaintenanceCost->execute(MaintenanceTypes::MaintenanceTBO, 'L');
        $this->assertEquals(MaintenanceCosts::CostTBOLarge, $cost);
    }

    public function test_cost_is_returned_for_general_maintenance()
    {
        $cost = $this->getMaintenanceCost->execute(MaintenanceTypes::GeneralMaintenance, 'S');
        $this->assertEquals(MaintenanceCosts::CostGeneral, $cost);
    }

    public function test_cost_is_returned_for_engine_maintenance()
    {
        $cost = $this->getMaintenanceCost->execute(MaintenanceTypes::EngineMaintenance, 'S');
        $this->assertEquals(MaintenanceCosts::CostEngine, $cost);
    }
}
