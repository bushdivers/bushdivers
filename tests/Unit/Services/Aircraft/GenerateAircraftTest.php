<?php

namespace Tests\Unit\Services\Aircraft;

use App\Models\Aircraft;
use App\Models\Airport;
use App\Models\Fleet;
use App\Services\Aircraft\GenerateAircraft;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class GenerateAircraftTest extends TestCase
{
    use RefreshDatabase;

    protected GenerateAircraft $generateAircraft;
    protected Model $currentAirport;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->generateAircraft = app()->make(GenerateAircraft::class);
        $this->currentAirport = Airport::factory()->create([
            'identifier' => 'AYMR',
            'country' => 'PG',
            'lat' => -6.36188,
            'lon' => 143.23070
        ]);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_aircraft_low_popularity_generated_successfully()
    {
        $fleet = Fleet::factory()->create([
            'popularity' => 1
        ]);

        Airport::factory()->create([
            'identifier' => 'AYMN',
            'country' => 'PG',
            'lat' => -6.14617,
            'lon' => 143.65733
        ]);

        $this->generateAircraft->execute($fleet->id, $this->currentAirport);
        $this->assertDatabaseHas('aircraft', [
            'fleet_id' => $fleet->id
        ]);
        $this->assertDatabaseCount('aircraft', 5);
    }

    public function test_aircraft_medium_popularity_generated_successfully()
    {
        $fleet = Fleet::factory()->create([
            'popularity' => 2
        ]);

        Airport::factory()->create([
            'identifier' => 'AYMN',
            'country' => 'PG',
            'lat' => -6.14617,
            'lon' => 143.65733
        ]);

        $this->generateAircraft->execute($fleet->id, $this->currentAirport);
        $this->assertDatabaseHas('aircraft', [
            'fleet_id' => $fleet->id
        ]);
        $this->assertDatabaseCount('aircraft', 10);
    }

    public function test_aircraft_high_popularity_generated_successfully()
    {
        $fleet = Fleet::factory()->create([
            'popularity' => 3
        ]);

        Airport::factory()->create([
            'identifier' => 'AYMN',
            'country' => 'PG',
            'lat' => -6.14617,
            'lon' => 143.65733
        ]);

        $this->generateAircraft->execute($fleet->id, $this->currentAirport);
        $this->assertDatabaseHas('aircraft', [
            'fleet_id' => $fleet->id
        ]);
        $this->assertDatabaseCount('aircraft', 15);
    }

    public function test_aircraft_generated_based_on_available_aircraft_successfully()
    {
        Airport::factory()->create([
            'identifier' => 'AYMN',
            'country' => 'PG',
            'lat' => -6.14617,
            'lon' => 143.65733
        ]);

        $fleet = Fleet::factory()->create([
            'popularity' => 1
        ]);

        Aircraft::factory()->create([
            'fleet_id' => $fleet->id,
            'owner_id' => null,
            'sale_price' => 10000,
            'current_airport_id' => 'AYMN'
        ]);

        $this->generateAircraft->execute($fleet->id, $this->currentAirport);
        $this->assertDatabaseHas('aircraft', [
            'fleet_id' => $fleet->id
        ]);
        // still 5 because 1 already exists
        $this->assertDatabaseCount('aircraft', 5);
    }
}
