<?php

namespace Tests\Unit\Services\Aircraft;

use App\Models\Aircraft;
use App\Models\AircraftEngine;
use App\Models\Enums\MaintenanceTypes;
use App\Services\Aircraft\ResetAircraftMaintenanceTimes;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ResetAircraftMaintenanceTimesTest extends TestCase
{
    use RefreshDatabase;

    protected ResetAircraftMaintenanceTimes $resetAircraftMaintenanceTimes;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->resetAircraftMaintenanceTimes = app()->make(ResetAircraftMaintenanceTimes::class);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_reset_100hr()
    {
        $aircraft = Aircraft::factory()->create([
            'fleet_id' => 1
        ]);
        $aircraftEngine = AircraftEngine::factory()->create([
            'aircraft_id' => $aircraft->id
        ]);
        $this->resetAircraftMaintenanceTimes->execute($aircraft->id, MaintenanceTypes::Maintenance100hr, $aircraftEngine->id);
        $aircraftEngine->refresh();
        $this->assertEquals(0, $aircraftEngine->mins_since_100hr);
    }

    public function test_reset_tbo()
    {
        $aircraft = Aircraft::factory()->create([
            'fleet_id' => 1
        ]);
        $aircraftEngine = AircraftEngine::factory()->create([
            'aircraft_id' => $aircraft->id
        ]);
        $this->resetAircraftMaintenanceTimes->execute($aircraft->id, MaintenanceTypes::MaintenanceTBO, $aircraftEngine->id);
        $aircraftEngine->refresh();
        $this->assertEquals(0, $aircraftEngine->mins_since_tbo);
        $this->assertEquals(100, $aircraftEngine->wear);
    }

    public function test_reset_annual()
    {
        $aircraft = Aircraft::factory()->create([
            'fleet_id' => 1
        ]);
        $this->resetAircraftMaintenanceTimes->execute($aircraft->id, MaintenanceTypes::Annual);
        $aircraft->refresh();
        $this->assertEquals(Carbon::now()->toDateString(), $aircraft->last_inspected_at->toDateString());
    }
}
