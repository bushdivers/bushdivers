<?php

namespace Tests\Unit\Services\Tours;

use App\Models\Pirep;
use App\Models\Tour;
use App\Models\TourCheckpointUser;
use App\Models\TourUser;
use App\Models\User;
use App\Services\Tours\CheckTourProgress;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CheckTourProgressTest extends TestCase
{
    use RefreshDatabase;

    protected Model $tour;
    protected Model $user;
    protected Model $tourUser;
    protected Model $tourCheckpointUser;
    protected Model $tourCheckpointUser1;

    protected Model $pirep;

    protected CheckTourProgress $checkTourProgress;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->checkTourProgress = $this->app->make(CheckTourProgress::class);
        $this->tour = Tour::factory()->create([
            'title' => 'test',
            'description' => 'test',
            'image' => 'test',
            'award_id' => 1,
            'start_airport_id' => 'AYMR'
        ]);
        $this->user = User::factory()->create();
        $this->tourUser = TourUser::factory()->create([
            'user_id' => $this->user->id,
            'tour_id' => $this->tour->id,
            'next_checkpoint' => 'WAVG'
        ]);
        $this->tourCheckpointUser = TourCheckpointUser::factory()->create([
            'user_id' => $this->user->id,
            'tour_id' => $this->tour->id,
            'section' => 1,
            'checkpoint' => 'WAVG'
        ]);
        $this->tourCheckpointUser1 = TourCheckpointUser::factory()->create([
            'user_id' => $this->user->id,
            'tour_id' => $this->tour->id,
            'section' => 2,
            'checkpoint' => 'AYMH'
        ]);
        $this->pirep = Pirep::factory()->create([
            'user_id' => $this->user->id,
            'tour_id' => $this->tour->id,
            'destination_airport_id' => 'WAVG',
        ]);
    }

    /**
     * A basic unit test example.
     */
    public function test_next_checkpoint_set(): void
    {
        $this->checkTourProgress->execute($this->pirep);
        $this->tourUser->refresh();
        $this->assertEquals('AYMH', $this->tourUser->next_checkpoint);
    }

    public function test_nothing_happens_if_not_checkpoint(): void
    {
        $this->pirep->destination_airport_id = 'AYMN';
        $this->pirep->save();
        $this->checkTourProgress->execute($this->pirep);
        $this->tourUser->refresh();
        $this->assertEquals('WAVG', $this->tourUser->next_checkpoint);
    }

    public function test_checkpoint_completed(): void
    {
        $this->checkTourProgress->execute($this->pirep);
        $this->tourCheckpointUser->refresh();
        $this->assertEquals(true, $this->tourCheckpointUser->is_completed);
    }

    public function test_only_correct_user_checkpoint_completed(): void
    {
        $user = User::factory()->create();
        $other = TourCheckpointUser::factory()->create([
            'user_id' => $user->id,
            'tour_id' => $this->tour->id,
            'section' => 1,
            'checkpoint' => 'WAVG'
        ]);
        $other1 = TourCheckpointUser::factory()->create([
            'user_id' => $user->id,
            'tour_id' => $this->tour->id,
            'section' => 2,
            'checkpoint' => 'AYMH'
        ]);
        $this->checkTourProgress->execute($this->pirep);
        $other->refresh();
        $this->assertEquals(false, $other->is_completed);
    }

    public function test_progress_updated(): void
    {
        $this->checkTourProgress->execute($this->pirep);
        $this->tourUser->refresh();
        $this->assertEquals(50, $this->tourUser->progress);
    }

    public function test_correct_tour_progress_updated(): void
    {
        $tour2 = Tour::factory()->create([
            'title' => 'test',
            'description' => 'test',
            'image' => 'test',
            'award_id' => 1,
            'start_airport_id' => 'AYMR'
        ]);
        $tour2User = TourUser::factory()->create([
            'user_id' => $this->user->id,
            'tour_id' => $tour2->id,
            'next_checkpoint' => 'WAVG'
        ]);
        $other = TourCheckpointUser::factory()->create([
            'user_id' => $this->user->id,
            'tour_id' => $tour2->id,
            'section' => 1,
            'checkpoint' => 'WAVG'
        ]);
        $other1 = TourCheckpointUser::factory()->create([
            'user_id' => $this->user->id,
            'tour_id' => $tour2->id,
            'section' => 2,
            'checkpoint' => 'AYMH'
        ]);
        $this->checkTourProgress->execute($this->pirep);
        $this->tourUser->refresh();
        $this->assertEquals(0, $tour2User->progress);
    }

    public function test_tour_completed(): void
    {
        $this->tourUser->next_checkpoint = 'AYMH';
        $this->tourUser->save();
        $this->tourCheckpointUser->is_completed = true;
        $this->tourCheckpointUser->save();
        $this->pirep->destination_airport_id = 'AYMH';
        $this->pirep->save();
        $this->checkTourProgress->execute($this->pirep);
        $this->tourUser->refresh();
        $this->assertEquals(true, $this->tourUser->is_completed);
    }

    public function test_tour_award_added(): void
    {
        $this->tourUser->next_checkpoint = 'AYMH';
        $this->tourUser->save();
        $this->tourCheckpointUser->is_completed = true;
        $this->tourCheckpointUser->save();
        $this->pirep->destination_airport_id = 'AYMH';
        $this->pirep->save();
        $this->checkTourProgress->execute($this->pirep);

        $this->assertDatabaseHas('award_user', [
            'user_id' => $this->user->id,
            'award_id' => $this->tour->award_id
        ]);
    }
}
