<?php

namespace Tests\Unit\Services\Weather;

use App\Services\Airports\GetMetarForAirport;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Http;
use Tests\TestCase;

class GetMetarTest extends TestCase
{
    protected GetMetarForAirport $getMetarForAirport;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Config::set('services.checkwx.key', '12345');
        Config::set('services.checkwx.url', 'https://example.com');

        $this->getMetarForAirport = $this->app->make(GetMetarForAirport::class);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_returned_for_valid_icao()
    {
        Http::preventStrayRequests();
        Http::fake([
            'https://example.com/metar/EGLL/decoded' => Http::response([
                'results' => 1,
                'data' => [['icao' => 'EGLL']]
            ]),
        ]);

        $metar = $this->getMetarForAirport->execute('EGLL');
        $this->assertNotEmpty($metar);
    }

    public function test_empty_string_is_returned_for_invalid_icao()
    {
        Http::preventStrayRequests();
        Http::fake([
            'https://example.com/metar/LLLL/decoded' => Http::response([
                'results' => 0,
                'data' => []
            ]),
            'https://example.com/metar/LLLL/nearest/decoded' => Http::response([
                'results' => 0,
                'data' => []
            ]),
        ]);
        $metar = $this->getMetarForAirport->execute('LLLL');
        $this->assertEmpty($metar);
    }
}
