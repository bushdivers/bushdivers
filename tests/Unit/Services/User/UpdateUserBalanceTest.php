<?php

namespace Tests\Unit\Services\User;

use App\Models\User;
use App\Services\UserService;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class UpdateUserBalanceTest extends TestCase
{
    use RefreshDatabase;

    protected UserService $userService;
    protected Model $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create([
            'account_balance' => 100
        ]);
        $this->userService = new UserService();
    }
    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_user_balance_updated_with_positive()
    {
        $this->userService->updateUserAccountBalance($this->user->id, 100);
        $this->assertDatabaseHas('users', [
            'id' => $this->user->id,
            'account_balance' => 200
        ]);
    }

    public function test_user_balance_updated_with_negative()
    {
        $this->userService->updateUserAccountBalance($this->user->id, -100);
        $this->assertDatabaseHas('users', [
            'id' => $this->user->id,
            'account_balance' => 0
        ]);
    }

    public function test_user_balance_updated_to_below_zero()
    {
        $this->userService->updateUserAccountBalance($this->user->id, -120);
        $this->assertDatabaseHas('users', [
            'id' => $this->user->id,
            'account_balance' => -20
        ]);
    }

    public function test_user_balance_updated_to_positive_from_negative()
    {
        $user = User::factory()->create([
            'account_balance' => -20
        ]);
        $this->userService->updateUserAccountBalance($user->id, 30);
        $this->assertDatabaseHas('users', [
            'id' => $user->id,
            'account_balance' => 10
        ]);
    }
}
