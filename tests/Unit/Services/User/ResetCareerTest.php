<?php

namespace Tests\Unit\Services\User;

use App\Models\Aircraft;
use App\Models\Fleet;
use App\Models\Rental;
use App\Models\User;
use App\Services\User\ResetCareer;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class ResetCareerTest extends TestCase
{
    use RefreshDatabase;

    protected Model $user;
    protected Model $aircraft;
    protected Model $fleet;
    protected ResetCareer $resetCareer;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->resetCareer = app()->make(ResetCareer::class);
        $this->user = User::factory()->create([
            'loan' => 100.00,
            'is_defaulted' => true
        ]);
        $this->fleet = Fleet::factory()->create();
        $this->aircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id,
            'owner_id' => $this->user->id
        ]);
    }

    /**
     * A basic unit test example.
     */
    public function test_user_loan_reset(): void
    {
        $this->resetCareer->execute($this->user->id);
        $this->user->refresh();
        $this->assertEquals(false, $this->user->is_defaulted);
        $this->assertEquals(0.00, $this->user->loan);
    }

    public function test_user_aircraft_reset(): void
    {
        $this->resetCareer->execute($this->user->id);
        $this->aircraft->refresh();
        $this->assertEquals(null, $this->aircraft->owner_id);
        $this->assertNotEquals(null, $this->aircraft->sale_price);
    }

    public function test_user_rental_ended(): void
    {
        $rental = Rental::factory()->create([
            'user_id' => $this->user->id,
            'fleet_id' => $this->fleet->id
        ]);
        $this->resetCareer->execute($this->user->id);
        $rental->refresh();
        $this->assertEquals(false, $rental->is_active);
    }


    public function test_multiple_user_aircraft_reset(): void
    {
        $secondAircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id,
            'owner_id' => $this->user->id,
            'registration' => 'test'
        ]);
        $this->resetCareer->execute($this->user->id);
        $this->aircraft->refresh();
        $secondAircraft->refresh();
        $this->assertEquals(null, $this->aircraft->owner_id);
        $this->assertNotEquals(null, $this->aircraft->sale_price);
        $this->assertEquals(null, $secondAircraft->owner_id);
        $this->assertNotEquals(null, $secondAircraft->sale_price);
    }

    public function test_only_user_aircraft_reset(): void
    {
        $fleetAircraft = Aircraft::factory()->create([
            'fleet_id' => $this->fleet->id,
            'owner_id' => 0,
            'registration' => 'test'
        ]);
        $this->resetCareer->execute($this->user->id);
        $this->aircraft->refresh();
        $fleetAircraft->refresh();
        $this->assertEquals(null, $this->aircraft->owner_id);
        $this->assertNotEquals(null, $this->aircraft->sale_price);
        $this->assertEquals(0, $fleetAircraft->owner_id);
        $this->assertEquals(null, $fleetAircraft->sale_price);
    }

    public function test_user_transactions_cleared_except_bonus(): void
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'total' => 100.00,
            'type' => 1
            ]);
        $this->resetCareer->execute($this->user->id);
        $this->assertDatabaseHas('user_accounts', [
            'user_id' => $this->user->id,
            'total' => 200.00
        ]);
        $this->assertDatabaseCount('user_accounts', 1);
    }

    public function test_only_user_transactions_cleared(): void
    {
        DB::table('user_accounts')->insert([
            'user_id' => $this->user->id,
            'total' => 100.00,
            'type' => 1
        ]);
        DB::table('user_accounts')->insert([
            'user_id' => 200,
            'total' => 100.00,
            'type' => 1
        ]);
        $this->resetCareer->execute($this->user->id);
        $this->assertDatabaseCount('user_accounts', 2);
    }
}
