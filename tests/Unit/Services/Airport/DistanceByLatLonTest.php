<?php

namespace Tests\Unit\Services\Airport;

use App\Models\Airport;
use App\Services\Airports\FindAirportsByLatLon;
use App\Services\Airports\FindAirportsWithinDistance;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class DistanceByLatLonTest extends TestCase
{
    use RefreshDatabase;

    protected Model $airport1;
    protected Model $airport2;
    protected FindAirportsByLatLon $findAirportsByLatLon;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->findAirportsByLatLon = $this->app->make(FindAirportsByLatLon::class);
        $this->airport1 = Airport::factory()->create([
            'identifier' => 'AYMR',
            'name' => 'Moro',
            'country' => 'PG',
            'is_hub' => true,
            'lat' => -6.36188,
            'lon' => 143.23070,
            'altitude' => 100
        ]);
        $this->airport2 = Airport::factory()->create([
            'identifier' => 'AYMH',
            'name' => 'Mount Hagen',
            'country' => 'PG',
            'is_hub' => true,
            'lat' => -5.82781,
            'lon' => 144.29953,
            'altitude' => 100
        ]);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_moro_returned_when_at_moro()
    {
        $lat = -6.36323;
        $lon = 143.24665;
        $airport = $this->findAirportsByLatLon->execute($lat, $lon, 3);
        $this->assertEquals('AYMR', $airport->identifier);
    }

    public function test_none_returned_if_not_found()
    {
        $lat = 51.47750;
        $lon = -0.46139;
        $airport = $this->findAirportsByLatLon->execute($lat, $lon, 2);
        $this->assertEquals(null, $airport);
    }
}
