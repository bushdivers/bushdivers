<?php

namespace Tests\Unit\Services\Contract;

use App\Models\Contract;
use App\Models\ContractCargo;
use App\Models\Enums\FinancialConsts;
use App\Services\Contracts\ExpiryContractCheck;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class TestExpiryContractCheck extends TestCase
{
    use RefreshDatabase;

    protected ExpiryContractCheck $expiryContractCheck;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->expiryContractCheck = $this->app->make(ExpiryContractCheck::class);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_contract_expiring_in_days()
    {
        $contract = Contract::factory()->create([
            'expires_at' => Carbon::now()->addHours(28)
        ]);
        $cargo = ContractCargo::factory()->create([
            'contract_id' => $contract->id,
            'contract_value' => 100.00
        ]);

        $expectedValue = 100.00 * FinancialConsts::ContractExpiryDays;
        $this->expiryContractCheck->execute(FinancialConsts::ContractExpiryDaysStr);
        $cargo->refresh();
        $this->assertEquals($expectedValue, $cargo->contract_value);
    }
//
//    public function test_contract_expiring_in_day()
//    {
//        $contract = Contract::factory()->create([
//            'expires_at' => Carbon::now()->addHours(20),
//            'contract_value' => 100.00
//        ]);
//        $expectedValue = 100.00 * FinancialConsts::ContractExpiryDay;
//        $this->expiryContractCheck->execute(FinancialConsts::ContractExpiryDayStr);
//        $contract->refresh();
//        $this->assertEquals($expectedValue, $contract->contract_value);
//    }
//
//    public function test_contract_expiring_in_half()
//    {
//        $contract = Contract::factory()->create([
//            'expires_at' => Carbon::now()->addHours(7),
//            'contract_value' => 100.00
//        ]);
//        $expectedValue = 100.00 * FinancialConsts::ContractExpiryHalf;
//        $this->expiryContractCheck->execute(FinancialConsts::ContractExpiryHalfStr);
//        $contract->refresh();
//        $this->assertEquals($expectedValue, $contract->contract_value);
//    }
//
//    public function test_contract_expiring_in_hours()
//    {
//        $contract = Contract::factory()->create([
//            'expires_at' => Carbon::now()->addMinutes(90),
//            'contract_value' => 100.00
//        ]);
//        $expectedValue = 100.00 * FinancialConsts::ContractExpiryHours;
//        $this->expiryContractCheck->execute(FinancialConsts::ContractExpiryHoursStr);
//        $contract->refresh();
//        $this->assertEquals($expectedValue, $contract->contract_value);
//    }
//
//    public function test_contract_expiring_in_hour()
//    {
//        $contract = Contract::factory()->create([
//            'expires_at' => Carbon::now()->addMinutes(55),
//            'contract_value' => 100.00
//        ]);
//        $expectedValue = 100.00 * FinancialConsts::ContractExpiryHour;
//        $this->expiryContractCheck->execute(FinancialConsts::ContractExpiryHourStr);
//        $contract->refresh();
//        $this->assertEquals($expectedValue, $contract->contract_value);
//    }
//
//    public function test_contract_expiring_in_mins()
//    {
//        $contract = Contract::factory()->create([
//            'expires_at' => Carbon::now()->addMinutes(2),
//            'contract_value' => 100.00
//        ]);
//        $expectedValue = 100.00 * FinancialConsts::ContractExpiryMins;
//        $this->expiryContractCheck->execute(FinancialConsts::ContractExpiryMinsStr);
//        $contract->refresh();
//        $this->assertEquals($expectedValue, $contract->contract_value);
//    }
//
//    public function test_contract_expiring_in_mins_sets_mins_updated()
//    {
//        $contract = Contract::factory()->create([
//            'expires_at' => Carbon::now()->addMinutes(2),
//            'contract_value' => 100.00
//        ]);
//        $this->expiryContractCheck->execute(FinancialConsts::ContractExpiryMinsStr);
//        $contract->refresh();
//        $this->assertEquals(1, $contract->mins_updated);
//    }
//
//    public function test_contract_expiring_in_day_is_not_updated_in_days_call()
//    {
//        $contract = Contract::factory()->create([
//            'expires_at' => Carbon::now()->addHours(28),
//            'contract_value' => 100.00
//        ]);
//        $contractDay = Contract::factory()->create([
//            'expires_at' => Carbon::now()->addHours(20),
//            'contract_value' => 100.00
//        ]);
//        //$expectedValue = 100.00 * FinancialConsts::ContractExpiryDays;
//        $this->expiryContractCheck->execute(FinancialConsts::ContractExpiryDaysStr);
//        $contractDay->refresh();
//        $this->assertEquals($contractDay->contract_value, $contractDay->contract_value);
//    }
//
//    public function test_contract_expiring_is_only_run_once_per_session()
//    {
//        $contract = Contract::factory()->create([
//            'expires_at' => Carbon::now()->addMinutes(2),
//            'contract_value' => 100.00
//        ]);
//        $expectedValue = 100.00 * FinancialConsts::ContractExpiryMins;
//        $this->expiryContractCheck->execute(FinancialConsts::ContractExpiryMinsStr);
//        $this->expiryContractCheck->execute(FinancialConsts::ContractExpiryMinsStr);
//        $contract->refresh();
//        $this->assertEquals($expectedValue, $contract->contract_value);
//    }

}
