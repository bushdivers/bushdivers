<?php

namespace Tests\Unit\Services\Contract;

use App\Models\Contract;
use App\Models\ContractCargo;
use App\Services\Contracts\UpdateContractCargoProgress;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

class SetCargoCompleteTest extends TestCase
{
    use RefreshDatabase;

    protected UpdateContractCargoProgress $updateContractCargoProgress;
    protected Model $contract;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        DB::table('cargo_types')->insert([
            ['type' => 1, 'text' => 'Solar Panels'],
            ['type' => 1, 'text' => 'Building materials'],
            ['type' => 2, 'text' => 'Medics'],
            ['type' => 2, 'text' => 'Locals'],
        ]);
        $this->updateContractCargoProgress = $this->app->make(UpdateContractCargoProgress::class);

        $this->contract = Contract::factory()->create();
    }
    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function test_cargo_is_completed()
    {
        $this->updateContractCargoProgress->execute($this->contract->id, $this->contract->arr_airport_id);
        $this->assertDatabaseHas('contracts', [
            'id' => $this->contract->id,
            'is_completed' => true
        ]);
    }

    public function test_cargo_is_not_completed_when_at_different_airport()
    {
        $this->updateContractCargoProgress->execute($this->contract->id, 'KLAX');
        $this->assertDatabaseHas('contracts', [
            'id' => $this->contract->id,
            'is_completed' => false
        ]);
    }

    public function test_cargo_location_is_updated()
    {
        $this->updateContractCargoProgress->execute($this->contract->id, 'AYMR');
        $this->assertDatabaseHas('contracts', [
            'id' => $this->contract->id,
            'current_airport_id' => 'AYMR'
        ]);
    }
}
