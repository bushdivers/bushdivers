<?php

namespace Tests\Unit\Services\Contract;

use App\Models\Airport;
use App\Models\CommunityJob;
use App\Models\CommunityJobContract;
use App\Models\Contract;
use App\Services\Contracts\UpdateContractCargoProgress;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class UpdateContractProgressCommunityContractTest extends TestCase
{
    use RefreshDatabase;

    protected UpdateContractCargoProgress $updateContractCargoProgress;
    protected Model $communityJob;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->updateContractCargoProgress = app()->make(UpdateContractCargoProgress::class);
        $this->communityJob = CommunityJob::factory()->create();
    }

    /**
     * A basic unit test example.
     */
    public function test_completed_contract_completes_community_job_contract(): void
    {
        $communityContract = CommunityJobContract::factory()->create([
            'community_job_id' => $this->communityJob->id,
        ]);
        $contract = Contract::factory()->create([
            'community_job_contract_id' => $communityContract->id,
            'contract_type_id' => 3,
            'payload' => 100,
            'cargo_type' => 1,
            'cargo_qty' => 100
        ]);
        $this->updateContractCargoProgress->execute($contract->id, 'AYMN');
        $communityContract->refresh();
        $this->assertEquals(0, $communityContract->remaining_payload);
        $this->assertTrue($communityContract->is_completed);
    }

    public function test_incompleted_fuel_contract_does_not_adds_fuel(): void
    {
        $communityContract = CommunityJobContract::factory()->create([
            'community_job_id' => $this->communityJob->id,
        ]);
        $contract1 = Contract::factory()->create([
            'community_job_contract_id' => $communityContract->id,
            'contract_type_id' => 3,
            'payload' => 50,
            'cargo_type' => 1,
            'cargo_qty' => 50
        ]);
        Contract::factory()->create([
            'community_job_contract_id' => $communityContract->id,
            'contract_type_id' => 3,
            'payload' => 50,
            'cargo_type' => 1,
            'cargo_qty' => 50
        ]);
        $this->updateContractCargoProgress->execute($contract1->id, 'AYMN');
        $communityContract->refresh();
        $this->assertEquals(50, $communityContract->remaining_payload);
        $this->assertFalse($communityContract->is_completed);
    }
}
