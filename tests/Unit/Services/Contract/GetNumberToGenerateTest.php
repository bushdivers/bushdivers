<?php

namespace Tests\Unit\Services\Contract;

use App\Models\Airport;
use App\Services\Contracts\GetNumberToGenerate;
use Illuminate\Database\Eloquent\Model;
use Tests\TestCase;

class GetNumberToGenerateTest extends TestCase
{
    protected GetNumberToGenerate $getNumberToGenerate;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->getNumberToGenerate = app()->make(GetNumberToGenerate::class);
    }

    /**
     * A basic unit test example.
     */
    public function test_hub_generates_up_to_50(): void
    {
        $airport = Airport::factory()->create([
            'is_hub' => true
        ]);
        $number = $this->getNumberToGenerate->execute($airport, 15);
        $this->assertEquals(35, $number);
    }

    public function test_size_5_generates_up_to_30(): void
    {
        $airport = Airport::factory()->create([
            'size' => 5,
            'is_hub' => false
        ]);
        $number = $this->getNumberToGenerate->execute($airport, 15);
        $this->assertEquals(15, $number);
    }

    public function test_size_4_generates_up_to_30(): void
    {
        $airport = Airport::factory()->create([
            'size' => 4,
            'is_hub' => false
        ]);
        $number = $this->getNumberToGenerate->execute($airport, 15);
        $this->assertEquals(15, $number);
    }

    public function test_size_3_generates_up_to_30(): void
    {
        $airport = Airport::factory()->create([
            'size' => 3,
            'is_hub' => false
        ]);
        $number = $this->getNumberToGenerate->execute($airport, 15);
        $this->assertEquals(15, $number);
    }

    public function test_size_2_generates_up_to_10(): void
    {
        $airport = Airport::factory()->create([
            'size' => 2,
            'is_hub' => false
        ]);
        $number = $this->getNumberToGenerate->execute($airport, 5);
        $this->assertEquals(5, $number);
    }

    public function test_size_1_generates_up_to_10(): void
    {
        $airport = Airport::factory()->create([
            'size' => 1,
            'is_hub' => false
        ]);
        $number = $this->getNumberToGenerate->execute($airport, 5);
        $this->assertEquals(5, $number);
    }

    public function test_size_0_generates_up_to_5(): void
    {
        $airport = Airport::factory()->create([
            'size' => 0,
            'is_hub' => false
        ]);
        $number = $this->getNumberToGenerate->execute($airport, 1);
        $this->assertEquals(4, $number);
    }

    public function test_nothing_generated_if_invalid_size(): void
    {
        $airport = Airport::factory()->create([
            'size' => -1,
            'is_hub' => false
        ]);
        $number = $this->getNumberToGenerate->execute($airport, 15);
        $this->assertEquals(0, $number);
    }
}
