<?php

namespace Tests\Unit\Services\Contract;

use App\Models\Contract;
use App\Models\ContractCargo;
use App\Models\User;
use App\Services\Contracts\CheckForExpiry;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Ramsey\Uuid\Uuid;
use Tests\TestCase;

class CheckExpiryTest extends TestCase
{
    use RefreshDatabase;

    protected Model $user;
    protected CheckForExpiry $checkForExpiry;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
        $this->checkForExpiry = app()->make(CheckForExpiry::class);
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */

    public function test_old_contract_is_closed()
    {
        $contract = Contract::factory()->create([
            'is_available' => false,
            'expires_at' => Carbon::now()->subDays(10),
            'active_pirep' => null
        ]);
        $this->checkForExpiry->execute();
        $this->assertDatabaseCount('contracts', 0);
    }


    public function test_in_progress_contract_is_not_closed()
    {
        $contract = Contract::factory()->create([
            'is_available' => false,
            'expires_at' => Carbon::now()->subDays(10),
            'active_pirep' => Uuid::uuid4()
        ]);
        $this->checkForExpiry->execute();
        $contract->refresh();
        $this->assertEquals(false, $contract->is_available);
        $this->assertDatabaseCount('contracts', 1);
    }

    public function test_assigned_contract_is_not_closed()
    {
        $contract = Contract::factory()->create([
            'is_available' => false,
            'user_id' => 1,
            'expires_at' => Carbon::now()->subDays(10)
        ]);
        $this->checkForExpiry->execute();
        $contract->refresh();
        $this->assertEquals(1, $contract->user_id);
        $this->assertDatabaseCount('contracts', 1);
    }


}
