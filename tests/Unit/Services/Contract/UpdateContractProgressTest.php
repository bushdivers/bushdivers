<?php

namespace Tests\Unit\Services\Contract;

use App\Models\Airport;
use App\Models\Contract;
use App\Models\Pirep;
use App\Services\Contracts\UpdateContractCargoProgress;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class UpdateContractProgressTest extends TestCase
{
    use RefreshDatabase;

    protected UpdateContractCargoProgress $updateContractCargoProgress;

    protected Pirep $pirep;
    protected Airport $aymh;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->updateContractCargoProgress = app()->make(UpdateContractCargoProgress::class);
        $this->pirep = Pirep::factory()->create();
        $this->aymh = Airport::factory()->create([
            'identifier' => 'AYMH',
        ]);
    }

    /**
     * A basic unit test example.
     */
    public function test_completed_contract_is_completed(): void
    {
        $contract = Contract::factory()-> create([
            'arr_airport_id' => $this->aymh->id
        ]);
        $this->updateContractCargoProgress->execute($contract, $this->aymh, $this->pirep);
        $contract->refresh();
        $this->assertEquals(true, $contract->is_completed);
    }

    public function test_outstanding_contract_is_not_completed(): void
    {
        $contract = Contract::factory()-> create([
            'arr_airport_id' => Airport::factory()->create()->id
        ]);
        $this->updateContractCargoProgress->execute($contract, $this->aymh, $this->pirep);
        $contract->refresh();
        $this->assertEquals(false, $contract->is_completed);
    }

    public function test_completed_fuel_contract_adds_fuel(): void
    {
        $airport = Airport::factory()->create([
            'identifier' => 'AYMG',
            'is_hub' => false,
            'has_avgas' => true,
            'avgas_qty' => 10
        ]);

        $contract = Contract::factory()->create([
            'arr_airport_id' => $airport->id,
            'is_fuel' => true,
            'fuel_qty' => 10,
            'fuel_type' => 1
        ]);
        $this->updateContractCargoProgress->execute($contract, $airport, $this->pirep);
        $airport->refresh();
        $this->assertEquals(20, $airport->avgas_qty);
    }

    public function test_incompleted_fuel_contract_does_not_adds_fuel(): void
    {
        $airport = Airport::factory()->create([
            'identifier' => 'AYMG',
            'is_hub' => false,
            'has_avgas' => true,
            'avgas_qty' => 10
        ]);

        $contract = Contract::factory()->create([
            'arr_airport_id' => $airport->id,
            'is_fuel' => true,
            'fuel_qty' => 10,
            'fuel_type' => 1
        ]);
        $this->updateContractCargoProgress->execute($contract, $this->aymh, $this->pirep);
        $airport->refresh();
        $this->assertEquals(10, $airport->avgas_qty);
    }
}
